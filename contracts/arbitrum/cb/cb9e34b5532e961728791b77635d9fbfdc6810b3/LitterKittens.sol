// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./Ownable.sol";
import "./ERC721A.sol";
import "./LitterKittensAccessControl.sol";

//....................................................................................................
//....................................................................................................
//......Made by Array.................................................................................
//......tw: @ArrayTheDev..............................................................................
//............................./@@&@.................................@@@@.............................
//............................./@@&@.................................@@@@.............................
//.........................&@@@#****@@@@.........................@&@@****@@@@*........................
//.........................&@@@%////****&&&&.................&&&&****////@@@@*........................
//.........................&&@&%////****&@&@.................@&@&****////@&@&*........................
//.........................&@@@%////****@@@@@@@@@@@@@@@@@@@@@@@@@****////@@@@*........................
//.........................&@@@%////****@@@@@@@@@@&@@@@@@@@@@@@@@****////@@@@*........................
//.....................@@@@((((/*********************************************%@@@%....................
//.....................@@@&((((/*********************************************%@@@%....................
//.....................@@@@((((/*********************************************%@@@%....................
//.....................@@@@((((/****************@@&@/************@&@@************(&@@@................
//.....................@@@@((((/****************@@@@/************@&@@************(@@@@................
//.....................@@@&((((/*************************************************(&@@@................
//.....................@@@@((((/********&&&&&&&&&&&&/***(&&&&****&&&&****&&&&/***(@@@@&&&&&&&&........
//.....................@@@@((((/********@@@@@@@@@@&@/***(@@@@****@&@@****@@@@/***(&@@@@@@@@@@@........
//.....................@@@@((((/*****************************@@@@@&@@@@@@********(@@@@................
//.....................@@@&((((/*****************************@@@@@&@@@@@@********(&@@@................
//.........................&@@@%((((((((****@@@@@@@@/****************************(@@@@@@@@............
//.........................,,,,/&&&&&&&&((((////////*************************%&&&#,,,,,,,,............
//............................./@@&@@@@@((((*********************************%@@@%....................
//..................................&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&*........................
//..................................@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&@@@@@@@@@@*........................
//............................./@@&@((((                             @@@@.............................
//.........................%&&&%((((********                         ////&&&&&&&&#....................
//.........................&@@@%((((********                         ****@&@@@@@@%....................
//.....................@@@@((((/********@@@@                     @&@@************(@@@@................
//.....................@@@@((((/********@@@@                     @&@@************(&@@@................
//.................@@@@((((*********@@@@********             ********@@@@*************@@@@............

contract LitterKittens is LitterKittensAccessControl, ERC721A, Ownable {
    using Strings for uint256;

    uint256 public constant MAX_SUPPLY = 5555;
    string public baseURI;
    bool public revealed;

    event TokensMinted(address mintedBy, uint256 quantity, string saleName);
    event BaseURIChanged(string baseURI);

    constructor(
        string memory _name,
        string memory _symbol,
        string memory _newBaseURI
    ) ERC721A(_name, _symbol) {
        baseURI = _newBaseURI;
    }

    function setBaseURI(string memory _newBaseURI) public onlyAdmin {
        baseURI = _newBaseURI;
    }

    function setReveal(bool _revealed) external onlyAdmin {
        revealed = _revealed;
    }

    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
        require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
        string memory base = _baseURI();
        if (bytes(base).length == 0) return "";
        return revealed ? string(abi.encodePacked(base, tokenId.toString())) : string(abi.encodePacked(base));
    }

    function numberMinted(address owner) public view returns (uint256) {
        return _numberMinted(owner);
    }

    function getOwnershipData(uint256 tokenId) external view returns (TokenOwnership memory) {
        return _ownershipOf(tokenId);
    }

    function mint(address _to, uint256 quantity) external onlyMinter {
        require(totalSupply() + quantity <= MAX_SUPPLY, "LitterKittens: Not enough tokens left.");
        _safeMint(_to, quantity);
    }

    function burn(uint256 _tokenId) external onlyBurner {
        _burn(_tokenId);
    }

    function _baseURI() internal view virtual override returns (string memory) {
        return baseURI;
    }

    function supportsInterface(bytes4 interfaceId) public view override(ERC721A, AccessControl) returns (bool) {
        return ERC721A.supportsInterface(interfaceId) || AccessControl.supportsInterface(interfaceId) || super.supportsInterface(interfaceId);
    }
}

