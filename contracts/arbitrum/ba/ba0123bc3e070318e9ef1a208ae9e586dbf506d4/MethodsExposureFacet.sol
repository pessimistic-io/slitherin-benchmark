// SPDX-License-Identifier: MIT
// This file was generated by the expose.ts script
pragma solidity ^0.8.0;

// imports
import "./DiamondCutFacet.sol";
import "./DiamondLoupeFacet.sol";
import "./OwnershipFacet.sol";
import "./ProxyEtherscanFacet.sol";
import "./BaseSweepFacet.sol";
import "./MarketplacesFacet.sol";
import "./SweepFacet.sol";
import "./SweepSwapFacet.sol";

contract MethodsExposureFacet {
  function diamondCut(IDiamondCut.FacetCut[] calldata, address, bytes calldata) external   {}

  function facets() external view returns(IDiamondLoupe.Facet[] memory) {}

  function facetFunctionSelectors(address) external view returns(bytes4[] memory) {}

  function facetAddresses() external view returns(address[] memory) {}

  function facetAddress(bytes4) external view returns(address) {}

  function supportsInterface(bytes4) external view returns(bool) {}

  function transferOwnership(address) external   {}

  function owner() external view returns(address) {}

  function implementation() external view returns(address) {}

  function setImplementation(address) external   {}

  function sweepFee() external view returns(uint256) {}

  function feeBasisPoints() external pure returns(uint256) {}

  function calculateFee(uint256) external view returns(uint256) {}

  function calculateAmountAmountWithoutFees(uint256) external view returns(uint256) {}

  function setFee(uint256) external   {}

  function getFee() external view returns(uint256) {}

  function approveERC20TokenToContract(IERC20, address, uint256) external   {}

  function transferETHTo(address payable, uint256) external   {}

  function transferERC20TokenTo(IERC20, address, uint256) external   {}

  function transferERC721To(IERC721, address, uint256) external   {}

  function transferERC1155To(IERC1155, address, uint256[] calldata, uint256[] calldata, bytes calldata) external   {}

  function TROVE_ID() external pure returns(MarketplaceType) {}

  function SEAPORT_V1_ID() external pure returns(MarketplaceType) {}

  function addMarketplace(address, address[] memory) external   {}

  function addMarketplaceToken(address, address) external   {}

  function getMarketplaceData(address) external view returns(MarketplaceData memory) {}

  function getMarketplacePaymentTokens(address) external view returns(address[] memory) {}

  function buyOrdersMultiTokens(MultiTokenBuyOrder[] calldata, uint16, address[] calldata, uint256[] calldata) external payable  {}

  function swapOrdersMultiTokens(MultiTokenBuyOrder[] calldata, uint16, address[] calldata, SwapInput[] calldata) external payable  {}
}

