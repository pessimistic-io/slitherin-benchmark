// SPDX-License-Identifier: MIT

// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@(((((&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%(((((((((((((#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@#((((((((((((((((((((@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
// @@@@@@@@@@@@@@@@@@@@@@@@@(((((((((((((((((((((@@@@@@@&((@@@@@@@@@@@@@@@@@@@@@@@@
// @@@@@@@@@@@@@@@@@@@@&((((((((((((((((((((#@@@@@@@(((((((((((#@@@@@@@@@@@@@@@@@@@
// @@@@@@@@@@@@@@@@#@@&(((((((((((((((((&@@@@@@&(((((((((((((((((((#@@@@@@@@@@@@@@@
// @@@@@@@@@@@&(((((&@%((((((((((((/@@@@@@@#((((((((((((((((((((#@@@@@@@@@@@@@@@@@@
// @@@@@@@#(((((((((&@%((((((((((@@@@@@(////////////((((((((%@@@@@@@((((((((#@@@@@@
// @@@@@@%((((((((((&@%((((((((//@%////////////////////(@@@@@@@%(((((((((((((#@@@@@
// @@@@@@%((((((((((&@%((((((//////////////////////#@@@@@@@((((((((((((((((((#@@@@@
// @@@@@@%((((((((%@@@%((((////////////////////&@@@@@@@//////(((((((((((((((((@@@@@
// @@@@@@%((((%@@@@@@&/((/////////////////(@@@@@@@%////////////(((((((((((((((@@@@@
// @@@@@@@@@@@@@@#(((((///////////////%@@@@@@@(/////////////////((((((((((((((@@@@@
// @@@@@@@@@@((((((((((///////////&@@@@@@&/////////////////////#/(((((((((((((@@@@@
// @@@@@@%((((((((((((///////////@@@@#////////////////////(@@@@@/(((((((((((((@@@@@
// @@@@@@%(((((((((((////////////@@@//////////////////%@@@@@@&////((((((((((((@@@@@
// @@@@@@%((((((((((/&(//////////@@@//////////////&@@@@@@#///////(((((((((((((@@@@@
// @@@@@@%(((((((@@@@@#//////////@@@/////////(@@@@@@@////////////(((((((((((((@@@@@
// @@@@@@&((%@@@@@@@@@%//////////@@@/////%@@@@@@&///////////////((((((((((((((@@@@@
// @@@@@@@@@@@@%((((@@%((////////@@@#@@@@@@@#/////////////////((((((((((((((((@@@@@
// @@@@@@@@%((((((((@@%((((/////#@@@@@@@/////////////////////%@@((((((((((((((@@@@@
// @@@@@@@((((((((((&@&((((/%@@@@@@&/////////////////////&@@@@@&((((((((((((((@@@@@
// @@@@@@@((((((((((&@@#@@@@@@@#////////////////////(@@@@@@@((((((((((((((((((@@@@@
// @@@@@@@#((((((((%@@@@@@@((((((((/////////////%@@@@@@%(((((((((((((((((((((@@@@@@
// @@@@@@@@@@@&&@@@@@@&((((((((((((((((((((/@@@@@@@((((((((((((((((((((((@@@@@@@@@@
// @@@@@@@@@@@@@@@@#((((((((((((((((((((@@@@@@@(((((((((((((((((((((%@@@@@@@@@@@@@@
// @@@@@@@@@@@@@@@@@@@@#(((((((((((%@@@@@@%(((((((((((((((((((((@@@@@@@@@@@@@@@@@@@
// @@@@@@@@@@@@@@@@@@@@@@@@&(((@@@@@@@(((((((((((((((((((((#@@@@@@@@@@@@@@@@@@@@@@@
// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@(((((((((((((((((((((&@@@@@@@@@@@@@@@@@@@@@@@@@@@
// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#((((((((((((((@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&(((((%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

pragma solidity ^0.8.0;

import "./OFT.sol";


// OMNI Contract
contract Omni is OFT {
    uint public fee = 0.000002 ether;
    uint public referral_fee = 0.000001 ether; 

    // Referral Event
    event ReferralUsed(address indexed to, uint256 amount, address referralAddress); 

    constructor(address _layerZeroEndpoint) OFT("Omni OFT", "OMNI", _layerZeroEndpoint) {}


    // Mint with referral function
    function _mintWithReferral(address _to, uint256 _amount, address referralAddress) internal {
        require(_amount * fee <= msg.value, "Insufficient ether");
        
        // If referral address is provided, add tracking event
        if (referralAddress != address(0)) {
            emit ReferralUsed(_to, _amount, referralAddress);
        }

        _mint(_to, _amount * 10 ** decimals());
    }

    // Mint function without referral
    function mint(address _to, uint256 _amount) external payable {
        _mintWithReferral(_to, _amount, address(0));
    }

    // Mint function with referral
    function mint(address _to, uint256 _amount, address referralAddress) external payable {
        _mintWithReferral(_to, _amount, referralAddress);
    }


    //  Set Fee
    function setFee(uint _fee) external onlyOwner {
        fee = _fee;
    }

    //  Withdraw
    function withdraw() public payable onlyOwner {
        (bool success, ) = payable(msg.sender).call{
            value: address(this).balance
        }("");
        require(success);
    }
}

