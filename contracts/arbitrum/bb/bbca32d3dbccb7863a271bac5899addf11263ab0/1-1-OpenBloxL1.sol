// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC721/presets/ERC721PresetMinterPauserAutoId.sol)

pragma solidity ^0.8.0;

import "./IOpenBlox.sol";
import "./ERC721PresetUpgradeable.sol";

contract OpenBloxL1 is IOpenBlox, ERC721PresetUpgradeable {
    /**
     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the
     * account that deploys the contract.
     *
     * Token URIs will be autogenerated based on `baseURI` and their token IDs.
     * See {ERC721-tokenURI}.
     */

    function initialize() public virtual initializer {
        __ERC721Preset_init("OpenBlox", "BLOX", "https://metadata.openblox.io/nft/");
    }

    mapping(uint256 => Blox) private _bloxes;

    /**
     * OpenBlox functions
     */
    function getBlox(uint256 tokenId)
        public
        view
        virtual
        returns (
            uint256 genes,
            uint256 bornAt,
            uint16 generation,
            uint256 parent0Id,
            uint256 parent1Id,
            uint256 ancestorCode,
            uint8 reproduction
        )
    {
        require(_exists(tokenId), "OpenBlox: nonexistent tokenId");
        Blox storage blox = _bloxes[tokenId];
        return (blox.genes, blox.bornAt, blox.generation, blox.parent0Id, blox.parent1Id, blox.ancestorCode, blox.reproduction);
    }

    function mintBlox(
        uint256 tokenId,
        address receiver,
        uint256 genes,
        uint256 bornAt,
        uint16 generation,
        uint256 parent0Id,
        uint256 parent1Id,
        uint256 ancestorCode,
        uint8 reproduction
    ) public virtual {
        require(hasRole(MINTER_ROLE, _msgSender()), "OpenBlox: not minter");
        _mintBlox(tokenId, receiver, genes, bornAt, generation, parent0Id, parent1Id, ancestorCode, reproduction);
    }

    function burnBlox(uint256 tokenId) public virtual {
        require(_isApprovedOrOwner(_msgSender(), tokenId), "OpenBlox: not owner nor approved");
        _burnBlox(tokenId);
    }

    function increaseReproduction(uint256 tokenId) public virtual {
        require(hasRole(MINTER_ROLE, _msgSender()), "OpenBlox: not minter");
        _bloxes[tokenId].reproduction += 1;
    }

    function _mintBlox(
        uint256 tokenId,
        address receiver,
        uint256 genes,
        uint256 bornAt,
        uint16 generation,
        uint256 parent0Id,
        uint256 parent1Id,
        uint256 ancestorCode,
        uint8 reproduction
    ) internal {
        Blox memory blox = Blox(genes, bornAt, generation, parent0Id, parent1Id, ancestorCode, reproduction);
        _safeMint(receiver, tokenId);
        _bloxes[tokenId] = blox;
    }

    function _burnBlox(uint256 tokenId) internal {
        _burn(tokenId);
        delete _bloxes[tokenId];
    }
}

