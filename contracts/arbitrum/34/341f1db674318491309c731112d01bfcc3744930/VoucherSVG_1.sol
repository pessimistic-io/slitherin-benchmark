// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
pragma abicoder v2;

import "./IVoucherSVG.sol";
import "./ISurfVoucher.sol";
import "./StringConverter.sol";

contract VoucherSVG1 is IVoucherSVG {
  using StringConverter for uint256;
  using StringConverter for uint128;
  using StringConverter for bytes;

  struct SVGParams {
    uint256 bondsAmount;
    uint128 tokenId;
    uint128 slotId;
    uint8 bondsDecimals;
  }

  /// Admin functions

  /// View functions

  function generateSVG(address _voucher, uint256 _tokenId) external view override returns (bytes memory) {
    ISurfVoucher voucher = ISurfVoucher(_voucher);
    uint128 slotId = uint128(voucher.slotOf(_tokenId));

    SVGParams memory svgParams;
    svgParams.bondsAmount = voucher.unitsInToken(_tokenId);
    svgParams.tokenId = uint128(_tokenId);
    svgParams.slotId = slotId;
    svgParams.bondsDecimals = uint8(voucher.unitDecimals());

    return _generateSVG(svgParams);
  }

  /// Internal functions

  function _generateSVG(SVGParams memory params) internal view virtual returns (bytes memory) {
    return
        abi.encodePacked(
          '<svg width="600px" height="400px" viewBox="0 0 600 400" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">',
          '<g stroke-width="1" fill="none" fill-rule="evenodd" font-family="Arial">',
          _generateBackground(),
          _generateTitle(params),
          _generateLogo(),
          "</g>",
          "</svg>"
      );
  }

  function _generateBackground() internal pure returns (string memory) {
    return 
        string(
            abi.encodePacked(
              '<path d="M400.8 142.367c-3.961 1.603-10.472 4.858-15.401 7.702-2.859 1.65-7.899 4.414-11.198 6.143-6.998 3.665-14.509 8.027-22.481 13.058-3.124 1.972-7.715 4.446-10.2 5.501-17.061 7.23-51.506 27.742-63.104 37.578-8.095 6.864-17.003 14.935-19.177 17.376-1.408 1.581-3.478 3.537-4.601 4.345-8.373 6.04-7.715 7.853 7.161 19.776 1.321 1.06 3.838 3.182 5.593 4.718s8.055 6.435 13.999 10.887c5.944 4.452 12.159 9.161 13.809 10.462 1.65 1.304 7.77 5.572 13.6 9.482 5.83 3.912 12.669 8.595 15.2 10.405 4.698 3.363 21.577 14.021 27.381 17.288 1.77.997 4.029 2.387 5.019 3.087 6.575 4.654 10.461 6.2 10.735 4.266.212-1.494-4.058-5.267-11.164-9.861-16.82-10.877-46.75-31.393-52.929-36.282-3.635-2.875-10.948-8.535-18.442-14.271-2.86-2.188-7.899-6.354-11.2-9.255-3.299-2.902-7.35-6.363-9-7.689-9.961-8.008-10.585-10.983-3.249-15.481 1.898-1.163 5.983-3.962 9.08-6.221 12.985-9.471 24.642-17.162 37.569-24.785 4.4-2.594 10.07-6.097 12.6-7.783 4.648-3.097 12.75-7.972 15.928-9.582 1.091-.552 2.272-.831 3.2-.753l1.472.122.201 4.471c.35 7.868.925 8.202 14.789 8.605 29.273.853 41.467 3.564 58.826 13.088 8.925 4.895 27.5 18.534 34.968 25.677 6.817 6.521 7.748 6.486 14.516-.544 4.105-4.264 3.95-5.401-1.247-9.171-1.569-1.137-5.082-3.881-7.806-6.097-16.038-13.045-17.43-14.041-30.188-21.597-14.523-8.602-25.208-12.31-42.059-14.597-10.457-1.419-14.13-1.704-25.439-1.973-11.838-.281-12.361-.381-12.361-2.35 0-1.557 2.239-3.439 5.6-4.706 1.651-.622 5.52-2.293 8.6-3.714 4.97-2.291 15.579-6.873 28.8-12.44 6.591-2.775 9.371-2.713 14.4.318 6.914 4.168 15.24 10.001 20.41 14.298 11.432 9.506 23.993 18.526 26.879 19.303 2.234.601 3.801.012 7.738-2.912 5.782-4.291 5.708-6.052-.427-10.272-1.21-.831-4.72-3.617-7.8-6.188-10.307-8.604-29.39-22.615-35.898-26.359-6.927-3.984-9.133-4.518-12.702-3.073m121.99 29.414c-.943.513-18.688 18.894-22.172 22.969-.872 1.017-4.022 4.627-7.001 8.02-24.996 28.472-23.772 34.551 2.183 10.838 1.76-1.608 6.26-5.398 10-8.422 3.739-3.022 8.869-7.419 11.4-9.771 2.531-2.35 7.215-6.42 10.411-9.042 7.835-6.426 8.633-7.938 5.662-10.735-3.826-3.602-8.076-5.166-10.483-3.857m-199.444 49.386c-4.989 3.043-5.488 11.097-.828 13.374 3.076 1.503 7.221-1.003 8.304-5.02 1.493-5.543-3.301-10.899-7.476-8.354m145.742 19.828c-2.953 1.013-7.888 5.788-7.888 7.628 0 1.585 6.473 7.333 16.073 14.271 8.76 6.334 15.129 11.184 19.328 14.72a477.316 477.316 0 0 0 8.199 6.737c5.332 4.252 10.294 8.846 18.4 17.035 9.79 9.891 10.842 10.21 15.486 4.703 3.216-3.814 3.891-5.72 2.925-8.261-1.332-3.504-24.357-24.873-37.81-35.092a1371.302 1371.302 0 0 1-10.402-7.973c-3.108-2.426-12.34-8.841-18.004-12.515-2.214-1.435-4.473-1.885-6.307-1.253M446.516 257.5a1312.53 1312.53 0 0 0-9.799 6.065c-23.077 14.395-37.505 17.914-80.717 19.69-13.778.566-14.4.865-14.4 6.918 0 6.724.559 6.916 18.343 6.308 19.271-.659 30.72-2.356 44.081-6.54 15.424-4.829 15.295-4.312-2.472 9.903-18.851 15.081-16.903 16.43 4.862 3.366 11.247-6.748 10.361-6.462 21.187-6.837 20.877-.724 36.935-5.244 34.855-9.81-.93-2.04-2.628-2.322-10.855-1.804-17.476 1.096-20.426 1.239-24.794 1.193-9.965-.101-9.933-.177 4.796-11.421 9.468-7.226 15.622-12.66 17.608-15.545 2.271-3.302 1.243-3.867-2.695-1.486" fill="#0d0592"/>',
              '<path d="M0 200v200h600V0H0v200m407.496-57.659c2.937 1.142 9.634 5.119 14.58 8.659 8.864 6.343 21.835 16.217 27.324 20.799 3.08 2.571 6.59 5.357 7.8 6.188 6.135 4.22 6.209 5.981.427 10.272-3.937 2.924-5.504 3.513-7.738 2.912-2.886-.777-15.447-9.797-26.879-19.303-5.17-4.297-13.496-10.13-20.41-14.298-5.029-3.031-7.809-3.093-14.4-.318-13.221 5.567-23.83 10.149-28.8 12.44-3.08 1.421-6.949 3.092-8.6 3.714-3.361 1.267-5.6 3.149-5.6 4.706 0 1.969.523 2.069 12.361 2.35 38.1.903 61.578 9.003 88.086 30.389 2.556 2.062 6.876 5.562 9.6 7.778 2.724 2.216 6.237 4.96 7.806 6.097 5.197 3.77 5.352 4.907 1.247 9.171-6.768 7.03-7.699 7.065-14.516.544-7.468-7.143-26.043-20.782-34.968-25.677-17.359-9.524-29.553-12.235-58.826-13.088-13.864-.403-14.439-.737-14.789-8.605L341 182.6l-1.472-.122c-.928-.078-2.109.201-3.2.753-3.178 1.61-11.28 6.485-15.928 9.582-2.53 1.686-8.2 5.189-12.6 7.783-12.927 7.623-24.584 15.314-37.569 24.785-3.097 2.259-7.182 5.058-9.08 6.221-7.336 4.498-6.712 7.473 3.249 15.481 1.65 1.326 5.701 4.787 9 7.689 3.301 2.901 8.34 7.067 11.2 9.255 7.494 5.736 14.807 11.396 18.442 14.271 6.179 4.889 36.109 25.405 52.929 36.282 7.106 4.594 11.376 8.367 11.164 9.861-.274 1.934-4.16.388-10.735-4.266-.99-.7-3.249-2.09-5.019-3.087-5.804-3.267-22.683-13.925-27.381-17.288-2.531-1.81-9.37-6.493-15.2-10.405-5.83-3.91-11.95-8.178-13.6-9.482-1.65-1.301-7.865-6.01-13.809-10.462-5.944-4.452-12.244-9.351-13.999-10.887-1.755-1.536-4.272-3.658-5.593-4.718-14.876-11.923-15.534-13.736-7.161-19.776 1.123-.808 3.193-2.764 4.601-4.345 2.174-2.441 11.082-10.512 19.177-17.376 11.598-9.836 46.043-30.348 63.104-37.578 2.485-1.055 7.076-3.529 10.2-5.501 7.972-5.031 15.483-9.393 22.481-13.058 3.299-1.729 8.339-4.493 11.198-6.143 4.929-2.844 11.44-6.099 15.401-7.702 2.324-.941 4.325-.949 6.696-.026M529.182 172.7c7.795 4.561 7.614 6.141-1.571 13.673-3.196 2.622-7.88 6.692-10.411 9.042-2.531 2.352-7.661 6.749-11.4 9.771-3.74 3.024-8.24 6.814-10 8.422-25.955 23.713-27.179 17.634-2.183-10.838 2.979-3.393 6.129-7.003 7.001-8.02 3.484-4.075 21.229-22.456 22.172-22.969 1.772-.964 3.632-.696 6.392.919m-201.795 48.268c4.264 1.782 4.956 8.193 1.295 12.009-5.927 6.176-12.821-2.658-7.58-9.711 1.927-2.595 3.872-3.306 6.285-2.298m148.008 21.28c5.664 3.674 14.896 10.089 18.004 12.515 1.981 1.544 6.66 5.131 10.402 7.973 13.453 10.219 36.478 31.588 37.81 35.092.966 2.541.291 4.447-2.925 8.261-4.644 5.507-5.696 5.188-15.486-4.703-8.106-8.189-13.068-12.783-18.4-17.035a477.316 477.316 0 0 1-8.199-6.737c-4.199-3.536-10.568-8.386-19.328-14.72-4.484-3.241-12.276-9.521-14.573-11.747-2.11-2.044-2.005-3.06.599-5.814 4.774-5.049 7.855-5.834 12.096-3.085M450.4 256.627c0 2.3-6.645 8.628-18.797 17.904-14.729 11.244-14.761 11.32-4.796 11.421 4.368.046 7.318-.097 24.794-1.193 8.227-.518 9.925-.236 10.855 1.804 2.08 4.566-13.978 9.086-34.855 9.81-10.826.375-9.94.089-21.187 6.837-11.116 6.672-17.614 9.708-17.614 8.229 0-1.145 2.275-3.214 12.752-11.595 17.767-14.215 17.896-14.732 2.472-9.903-13.361 4.184-24.81 5.881-44.081 6.54-17.784.608-18.343.416-18.343-6.308 0-6.053.622-6.352 14.4-6.918 43.212-1.776 57.64-5.295 80.717-19.69 13.102-8.172 13.683-8.468 13.683-6.938" fill="#7347f4"/>'
            )
        );
  }

  function _generateTitle(SVGParams memory params) internal pure returns (string memory) {
    string memory tokenIdStr = params.tokenId.toString();
    uint256 tokenIdLeftMargin = 488 - 20 * bytes(tokenIdStr).length;

    bytes memory amount = _formatValue(params.bondsAmount, params.bondsDecimals).trim(3);
    uint256 amountLeftMargin = 280 - 20 * amount.length;

    return 
      string(
        abi.encodePacked(
          '<g transform="translate(30, 30)" fill="#FFFFFF" fill-rule="nonzero">',
              '<text font-family="Arial" font-size="32">',
                  abi.encodePacked(
                      '<tspan x="', tokenIdLeftMargin.toString(), '" y="25"># ', tokenIdStr, '</tspan>'
                  ),
              '</text>',
              '<text font-family="Arial" font-size="64">',
                  abi.encodePacked(
                      '<tspan x="', amountLeftMargin.toString(), '" y="185">', amount, '</tspan>'
                  ),
              '</text>',
              '<text font-family="Arial" font-size="24"><tspan x="460" y="185">Points</tspan></text>',
              '<text font-family="Arial" font-size="24" font-weight="500"><tspan x="50" y="25"> SURF Game Points</tspan></text>',
          '</g>'
        )
      );
  }

  function _generateLogo() internal pure returns (string memory) {
    return
      string(
        abi.encodePacked(
            '<g transform="translate(20, 20)" fill-rule="evenodd">',
            '<path d="M23.2.403c-4.876.398-10.899 2.96-14.234 6.056C4.067 11.006 1.71 15.488.671 22.225c-.051.333-.069 1.03-.07 2.671L.6 27.116l.201 1.105c.456 2.507.669 3.324 1.324 5.106 1.485 4.028 3.81 7.335 7.175 10.202 2.755 2.347 5.765 3.915 9.444 4.921 1.921.525 2.566.639 4.431.78 5.183.394 10.191-.853 14.85-3.694 2.686-1.638 5.48-4.38 7.351-7.212 1.487-2.251 1.296-2.664-.79-1.704-2.284 1.05-6.29 2.577-9.111 3.474-5.071 1.611-8.317 2.164-12.775 2.172-5.646.012-10.194-1.271-13.278-3.744-2.404-1.929-3.661-4.031-3.926-6.571-.461-4.409 2.314-7.837 6.904-8.524 2.594-.389 3.633.111 1.901.913-2.864 1.326-3.918 2.161-4.648 3.681-.651 1.354-.512 3.253.341 4.673 1.489 2.479 6.026 4.6 11.306 5.288 1.398.181 1.531.091 2.771-1.891a56.576 56.576 0 0 1 1.299-1.967l1.348-1.934a132.466 132.466 0 0 1 2.744-3.751c1.026-1.345.993-1.429-1.011-2.636-3.084-1.859-5.809-3.551-6.758-4.199a154.481 154.481 0 0 0-1.506-1.014c-4.556-3.008-4.784-3.214-4.313-3.909.736-1.084 8.467-8.582 10.149-9.842 1.141-.856 1.479-.611.823.596-.607 1.119-3.456 5.464-4.472 6.819-1.551 2.072-1.532 2.172.651 3.336.359.191.955.539 1.325.773.37.234 1.022.629 1.449.877a103.515 103.515 0 0 1 1.85 1.115c.59.364 1.466.903 1.948 1.197.787.481 2.509 1.594 3.5 2.263 2.948 1.989 2.938 1.981 2.888 2.496-.044.45-.823 1.331-4.059 4.584-2.531 2.544-3.222 3.213-5.13 4.956-1.881 1.719-1.91 1.752-1.827 2.08.098.39 2.269.453 4.954.143l1.3-.151c1.748-.204 4.724-.729 6.1-1.077.22-.056.908-.211 1.529-.344a41.794 41.794 0 0 0 1.875-.449 85.531 85.531 0 0 1 1.946-.501c3.449-.849 4.479-1.187 4.829-1.586.751-.855 1.816-5.044 1.954-7.688.106-2.039.026-3.154-.411-5.7-1.205-7.014-5.678-13.329-12.022-16.974-1.868-1.073-3.825-1.846-6.4-2.527A57.674 57.674 0 0 0 28.098.55c-.971-.178-3.551-.254-4.9-.144" fill="#fbc33c"/>',
            '</g>'
        )
      );
  }

  function _formatValue(uint256 value, uint8 decimals) private pure returns (bytes memory) {
    return value.uint2decimal(decimals).trim(decimals - 2).addThousandsSeparator();
  }
}
