// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/presets/ERC721PresetMinterPauserAutoId.sol)

pragma solidity ^0.8.0;

import "./ERC721.sol";
import "./ERC721Enumerable.sol";
import "./ERC721Burnable.sol";
import "./IERC721Metadata.sol";
import "./AccessControlEnumerable.sol";
// import "@openzeppelin/contracts/utils/Context.sol";
// import "@openzeppelin/contracts/access/Ownable.sol";
import "./Counters.sol";
import "./Strings.sol";
import "./UriChanger.sol";

import "./ERC5169.sol";

/**
 * @dev {ERC721} token, including:
 *
 *  - ability for holders to burn (destroy) their tokens
 *  - a minter role that allows for token minting (creation)
 *  - a pauser role that allows to stop all token transfers
 *  - token ID and URI autogeneration
 *
 * This contract uses {AccessControl} to lock permissioned functions using the
 * different roles - head to its documentation for details.
 *
 * The account that deploys the contract will be granted the minter and pauser
 * roles, as well as the default admin role, which will let it grant both minter
 * and pauser roles to other accounts.
 *
 * _Deprecated in favor of https://wizard.openzeppelin.com/[Contracts Wizard]._
 */
contract DevconSuveneer is
    ERC721Enumerable,
    ERC721Burnable,
    UriChanger,
    ERC5169
{
    using Strings for uint256;

    string constant JSON_FILE = ".json";
    string constant _metadataURI = "https://resources.smarttokenlabs.com/";

    string private _baseTokenURI;

    uint private mintEnd;

    function setMintEnd(uint newTime) external onlyOwner {
        mintEnd = newTime;
    }

    function _authorizeSetScripts(string[] memory) internal override onlyOwner {}

    /**
     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the
     * account that deploys the contract.
     *
     * Token URIs will be autogenerated based on `baseURI` and their token IDs.
     * See {ERC721-tokenURI}.
     */
    constructor() ERC721("Devcon VI Souvenir", "DEVCONVI") UriChanger(msg.sender){
        mintEnd = block.timestamp + 30 * 24 * 60 * 60;
    }

    function _baseURI() internal view virtual override returns (string memory) {
        return _baseTokenURI;
    }

    function setBaseURI(string calldata newBaseTokenURI) external onlyUriChanger {
        _baseTokenURI = newBaseTokenURI;
    }

    /**
     * @dev Creates a new token for `to`. Its token ID will be automatically
     * assigned (and available on the emitted {IERC721-Transfer} event), and the token
     * URI autogenerated based on the base URI passed at construction.
     *
     * See {ERC721-_mint}.
     *
     * Requirements:
     *
     * - the caller must have the `MINTER_ROLE`.
     */
    function mint(address to, uint tokenId) public virtual onlyUriChanger {
        require(block.timestamp < mintEnd, "Minting finished");
        // We cannot just use balanceOf to create the new tokenId because tokens
        // can be burned (destroyed), so we need a separate counter.
        _mint(to, tokenId);
    }


    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual override(ERC721, ERC721Enumerable) {
        super._beforeTokenTransfer(from, to, tokenId);
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId)
        public
        view
        virtual
        override(ERC721, ERC721Enumerable, ERC5169)
        returns (bool)
    {
        return super.supportsInterface(interfaceId) || ERC5169.supportsInterface(interfaceId);
    }

    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
        _requireMinted(tokenId);

        string memory base = _baseURI();

        // If there is no base URI, return the token URI.
        if (bytes(base).length > 0) {
            return string(abi.encodePacked(base, "/", tokenId.toString()));
        } else {
            return string(abi.encodePacked(_metadataURI, block.chainid.toString(), "/", contractAddress(), "/", tokenId.toString()));
        }
    }

    function contractAddress() internal view returns (string memory) {
        return Strings.toHexString(uint160(address(this)), 20);
    }

    function contractURI() public pure returns (string memory) {
        return string(abi.encodePacked(_metadataURI, "/contract/devcon6_souvenir.json"));
    }
}

