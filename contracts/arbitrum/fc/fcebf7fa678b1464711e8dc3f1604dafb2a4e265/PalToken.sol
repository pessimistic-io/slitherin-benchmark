// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

import "./Ownable.sol";
import "./ERC721.sol";
import "./ERC721Enumerable.sol";
import "./ERC721Burnable.sol";
import "./ERC721Pausable.sol";
import "./AccessControlEnumerable.sol";
import "./Counters.sol";

contract PalToken is 
    Ownable, 
    AccessControlEnumerable,
    ERC721Enumerable,
    ERC721Burnable,
    ERC721Pausable
{
    using Counters for Counters.Counter;

    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");

    Counters.Counter private _tokenIdTracker;
    string private _baseTokenURI;

    mapping(uint256 => uint256) private _mintTimestamps;
    mapping(uint256 => Rarity) private _rarities;

    event BaseURIUpdated(string previousBaseURI, string newBaseURI);

    enum Rarity {
        Economy,
        Common,
        Uncommon,
        Rare,
        Epic,
        Legendary
    }

    /**
     * @dev Initializes the contract by granting `DEFAULT_ADMIN_ROLE`, and `MINTER_ROLE`
     * to the deploying account and setting the base token URI for token metadata.
     *
     * @param baseTokenURI Token URIs will be autogenerated based on `baseURI` and their token IDs.
     * See {ERC721-tokenURI}.
     */
    constructor(
        string memory _name,
        string memory _symbol,
        string memory baseTokenURI
    ) ERC721(_name, _symbol) {
        _baseTokenURI = baseTokenURI;
        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
        _setupRole(MINTER_ROLE, _msgSender());
    }

    /**
     * @dev Returns the base URI for the token metadata.
     *
     * @return The base URI for the token metadata, which will be used to generate token URIs.
     * See {ERC721TokenURI}.
     */
    function _baseURI() internal view virtual override returns (string memory) {
        return _baseTokenURI;
    }

    /**
     * @dev Sets the base URI for the token metadata.
     *
     * @param newBaseTokenURI The new base URI for the token metadata, which will be used to generate token URIs.
     * Requirements:
     * - the caller must have the owner role.
     */
    function setBaseURI(string memory newBaseTokenURI) public onlyOwner {
        string memory oldBaseTokenURI = _baseTokenURI;
        _baseTokenURI = newBaseTokenURI;
        emit BaseURIUpdated(oldBaseTokenURI, newBaseTokenURI);
    }

    /**
     * @dev Returns the timestamp at which the specified token was minted.
     *
     * @param tokenId The ID of the token whose minting timestamp is being queried.
     * @return The timestamp at which the token was minted.
     * Requirements:
     * - The token must exist.
     */
    function getMintTimestamp(uint256 tokenId) public view returns (uint256) {
        require(_exists(tokenId), "PalToken: Token does not exist");
        return _mintTimestamps[tokenId];
    }

    /**
     * @dev Mints a new token with the given rarity.
     *
     * @param rarity The rarity of the new token.
     * Requirements:
     * - The caller must have the `MINTER_ROLE`.
     */
    function mint(address to, Rarity rarity) public {
        require(hasRole(MINTER_ROLE, _msgSender()), "PalToken: must have minter role to mint");

        uint256 tokenId = _tokenIdTracker.current();
        _mintTimestamps[tokenId] = block.timestamp;
        _rarities[tokenId] = rarity;

        // We cannot just use balanceOf to create the new tokenId because tokens
        // can be burned (destroyed), so we need a separate counter.
        _mint(to, tokenId);
        _tokenIdTracker.increment();
    }

    /**
     * @dev Returns the rarity of the specified token.
     *
     * @param tokenId The ID of the token whose rarity is being queried.
     * @return The rarity of the specified token.
     * Requirements:
     * - The token must exist.
     */
    function getRarity(uint256 tokenId) public view returns (Rarity) {
        require(_exists(tokenId), "PalToken: Token does not exist");
        return _rarities[tokenId];
    }

    function getRarities(
        uint256[] calldata tokenIds
    ) external view returns (PalToken.Rarity[] memory) {
        PalToken.Rarity[] memory rarities = new PalToken.Rarity[](
            tokenIds.length
        );
        for (uint i; i < tokenIds.length; i++) {
            PalToken.Rarity rarity = getRarity(tokenIds[i]);
            rarities[i] = rarity;
        }
        return rarities;
    }

    /**
     * @dev Pauses all token transfers.
     *
     * See {ERC721Pausable} and {Pausable-_pause}.
     *
     * Requirements:
     *
     * - the caller must be owner.
     */
    function pause() public virtual onlyOwner {
        _pause();
    }

    /**
     * @dev Unpauses all token transfers.
     *
     * See {ERC721Pausable} and {Pausable-_unpause}.
     *
     * Requirements:
     *
     * - the caller must be owner.
     */
    function unpause() public virtual onlyOwner {
        _unpause();
    }

    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual override(ERC721, ERC721Enumerable, ERC721Pausable) {
        super._beforeTokenTransfer(from, to, tokenId);
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId)
        public
        view
        virtual
        override(AccessControlEnumerable, ERC721, ERC721Enumerable)
        returns (bool)
    {
        return super.supportsInterface(interfaceId);
    }
}
