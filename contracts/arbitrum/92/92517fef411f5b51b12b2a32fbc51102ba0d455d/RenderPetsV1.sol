//SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.0;

import "./ICudlFinance.sol";

contract RenderPetsV1 {
    ICudlFinance public game;
    address public cudlPets;

    constructor(address _game, address _cudlPets) {
        game = ICudlFinance(_game);
        cudlPets = _cudlPets;
    }

    // @title Base64
    // @author Brecht Devos - <brecht@loopring.org>
    // @notice Provides a function for encoding some bytes in base64
    string internal constant TABLE =
        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

    function encodeBase64(bytes memory data)
        internal
        pure
        returns (string memory)
    {
        if (data.length == 0) return "";

        // load the table into memory
        string memory table = TABLE;

        // multiply by 4/3 rounded up
        uint256 encodedLen = 4 * ((data.length + 2) / 3);

        // add some extra buffer at the end required for the writing
        string memory result = new string(encodedLen + 32);

        assembly {
            // set the actual output length
            mstore(result, encodedLen)

            // prepare the lookup table
            let tablePtr := add(table, 1)

            // input ptr
            let dataPtr := data
            let endPtr := add(dataPtr, mload(data))

            // result ptr, jump over length
            let resultPtr := add(result, 32)

            // run over the input, 3 bytes at a time
            for {

            } lt(dataPtr, endPtr) {

            } {
                dataPtr := add(dataPtr, 3)

                // read 3 bytes
                let input := mload(dataPtr)

                // write 4 characters
                mstore(
                    resultPtr,
                    shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F))))
                )
                resultPtr := add(resultPtr, 1)
                mstore(
                    resultPtr,
                    shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F))))
                )
                resultPtr := add(resultPtr, 1)
                mstore(
                    resultPtr,
                    shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F))))
                )
                resultPtr := add(resultPtr, 1)
                mstore(
                    resultPtr,
                    shl(248, mload(add(tablePtr, and(input, 0x3F))))
                )
                resultPtr := add(resultPtr, 1)
            }

            // padding with '='
            switch mod(mload(data), 3)
            case 1 {
                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))
            }
            case 2 {
                mstore(sub(resultPtr, 1), shl(248, 0x3d))
            }
        }

        return result;
    }

    string[6] ears = [
        "<path d='M44.3309 121.252L44.5979 119.632L44.2047 118.037C38.9358 96.6656 35.9757 76.7414 36.1839 60.0955C36.3948 43.2284 39.8424 30.9918 46.0401 23.6577C51.7518 16.8986 61.0476 12.8871 77.0129 15.271C93.321 17.706 115.629 26.7648 145.26 45.284L146.619 46.1331L148.199 46.3936C199.486 54.8435 238.405 93.5116 232.701 142.654C187.173 164.413 160.617 185.872 117.196 230.787C68.4758 220.509 35.8858 172.51 44.3309 121.252Z' fill='url(#fill_pattern)' stroke='black' stroke-width='16'/>  <path d='M735.981 120.749L735.714 119.128L736.107 117.533C741.376 96.1621 744.336 76.2379 744.128 59.592C743.917 42.725 740.469 30.4884 734.272 23.1543C728.56 16.3952 719.264 12.3837 703.299 14.7675C686.991 17.2025 664.682 26.2614 635.052 44.7806L633.693 45.6297L632.112 45.8901C580.825 54.34 541.907 93.0082 547.61 142.151C593.139 163.91 619.695 185.369 663.116 230.283C711.836 220.006 744.426 172.006 735.981 120.749Z' fill='url(#fill_pattern)' stroke='black' stroke-width='16'/> ",
        "<path d='M199.566 115.458L199.55 115.738L199.561 116.018C199.8 122.463 200.051 128.087 200.272 133.035C200.727 143.226 201.054 150.554 200.888 156.291C200.651 164.497 199.405 167.983 196.895 171.013C193.994 174.516 189.199 177.755 179.965 183.994C179.498 184.309 179.02 184.632 178.531 184.963C168.694 191.612 155.134 200.943 136.648 216.112L136.37 216.339L136.122 216.598C130.478 222.486 126.308 224.14 123.915 224.097C122.233 224.066 119.656 223.097 117.158 217.46C114.635 211.765 112.864 202.512 112.698 189.094C112.534 175.784 113.951 158.808 117.451 137.959C122.356 108.741 142.343 79.5472 170.166 56.6444C194.359 36.729 223.964 22.006 253.467 16.2986C251.042 19.3621 248.371 22.3669 245.512 25.4345C243.777 27.296 241.949 29.2044 240.069 31.1663C235.528 35.9051 230.689 40.9553 226.154 46.407C212.942 62.2895 201.423 82.5156 199.566 115.458Z' fill='url(#fill_pattern)' stroke='black' stroke-width='12'/><path d='M564.364 115.458L564.38 115.738L564.37 116.018C564.13 122.463 563.879 128.087 563.658 133.035C563.204 143.226 562.876 150.554 563.042 156.291C563.279 164.497 564.525 167.983 567.035 171.013C569.937 174.516 574.732 177.755 583.965 183.994C584.432 184.309 584.91 184.632 585.399 184.963C595.236 191.612 608.796 200.943 627.283 216.112L627.56 216.339L627.808 216.598C633.452 222.486 637.622 224.14 640.015 224.097C641.697 224.066 644.275 223.097 646.772 217.46C649.295 211.765 651.066 202.512 651.232 189.094C651.396 175.784 649.98 158.808 646.479 137.959C641.574 108.741 621.587 79.5472 593.765 56.6444C569.571 36.729 539.966 22.006 510.463 16.2986C512.889 19.3621 515.559 22.3669 518.418 25.4345C520.153 27.296 521.982 29.2044 523.861 31.1663C528.402 35.9051 533.241 40.9553 537.776 46.407C550.988 62.2895 562.507 82.5156 564.364 115.458Z' fill='url(#fill_pattern)' stroke='black' stroke-width='12'/>",
        "<path d='M165.302 28.5395C229.468 39.1114 275.157 92.6624 267.214 155.037C210.045 181.459 177.123 207.417 122.581 262.639C59.9555 250.133 18.0782 190.106 28.5394 126.611C39.2236 61.7635 100.454 17.8554 165.302 28.5395Z' fill='url(#fill_pattern)' stroke='black' stroke-width='16'/><path d='M638.78 28.5395C574.613 39.1114 528.925 92.6624 536.867 155.037C594.036 181.459 626.959 207.417 681.501 262.639C744.126 250.133 786.003 190.106 775.542 126.611C764.858 61.7635 703.627 17.8554 638.78 28.5395Z' fill='url(#fill_pattern)' stroke='black' stroke-width='16'/>",
        "<path d='M256.988 87.694C265.941 82.4813 273.874 77.8621 280.627 73.5913C269.184 72.0196 253.134 71.2023 234.254 71.3956C208.014 71.6642 176.845 73.8753 146.111 78.4642C115.343 83.0581 85.2116 90.0058 60.9482 99.6671C36.4356 109.428 19.0079 121.531 12.0592 135.739L11.8346 136.198L11.5217 136.602C10.3828 138.074 10.308 139.053 10.4416 139.794C10.615 140.757 11.3232 142.216 13.2613 144.144C17.1923 148.054 24.4879 152.242 34.3176 156.499C53.7748 164.927 80.7072 172.627 103.246 179.063C109.962 180.981 115.091 181.271 119.68 180.392C124.305 179.506 128.816 177.351 134.194 173.686C139.437 170.112 145.197 165.325 152.528 159.232L153.354 158.545C161.016 152.178 170.196 144.587 181.767 135.984C204.891 118.79 226.82 105.388 245.607 94.3428C249.561 92.0181 253.358 89.8072 256.988 87.694Z' fill='url(#fill_pattern)' stroke='black' stroke-width='10' transform='translate(-10,50)' /><path d='M551.415 87.6595C542.462 82.4467 534.529 77.8276 527.776 73.5568C539.219 71.985 555.27 71.1678 574.149 71.361C600.389 71.6296 631.558 73.8407 662.292 78.4296C693.06 83.0236 723.191 89.9712 747.455 99.6325C771.968 109.393 789.395 121.496 796.344 135.704L796.568 136.163L796.881 136.568C798.02 138.039 798.095 139.018 797.961 139.76C797.788 140.722 797.08 142.181 795.142 144.109C791.211 148.019 783.915 152.207 774.085 156.465C754.628 164.892 727.696 172.592 705.157 179.028C698.441 180.946 693.312 181.236 688.723 180.357C684.098 179.471 679.587 177.316 674.209 173.651C668.966 170.078 663.206 165.291 655.875 159.197L655.049 158.51C647.387 152.144 638.207 144.552 626.636 135.949C603.512 118.756 581.583 105.354 562.796 94.3082C558.842 91.9835 555.045 89.7727 551.415 87.6595Z' fill='url(#fill_pattern)' stroke='black' stroke-width='10' transform='translate(-10,50)' />",
        "<path d='M135.971 201.122C121.007 214.124 104.366 229.478 90.3904 244.287C92.1349 233.158 95.4904 218.607 100.282 202.011C107.547 176.851 117.965 147.488 130.549 119.197C143.148 90.8741 157.835 63.814 173.585 43.1424C189.497 22.259 205.784 8.8392 221.34 6.06131L221.844 5.97143L222.318 5.78156C223.159 5.44546 224.406 5.37078 226.544 6.75145C228.776 8.19295 231.391 10.8981 234.204 14.9445C239.79 22.9817 245.287 35.0395 249.683 48.4332C254.065 61.7828 257.242 76.1213 258.352 88.5736C258.907 94.7998 258.934 100.439 258.385 105.185C257.827 109.992 256.717 113.532 255.267 115.839C250.499 123.423 240.442 130.63 226.132 139.14C221.517 141.885 216.485 144.752 211.167 147.782C200.496 153.862 188.678 160.596 176.781 168.304C171.207 171.915 154.724 184.828 135.971 201.122Z' fill='url(#fill_pattern)' stroke='black' stroke-width='10' transform='translate(0,5)'/><path d='M626.812 201.55C641.776 214.552 658.417 229.906 672.392 244.714C670.648 233.586 667.292 219.035 662.501 202.439C655.236 177.278 644.818 147.915 632.234 119.624C619.635 91.3015 604.948 64.2414 589.198 43.5697C573.286 22.6864 556.998 9.26657 541.442 6.48867L540.939 6.3988L540.464 6.20893C539.624 5.87283 538.376 5.79815 536.239 7.17882C534.007 8.62032 531.391 11.3254 528.579 15.3719C522.993 23.4091 517.496 35.4669 513.099 48.8606C508.718 62.2102 505.541 76.5487 504.431 89.001C503.876 95.2272 503.848 100.866 504.398 105.612C504.955 110.419 506.066 113.959 507.516 116.266C512.283 123.851 522.341 131.057 536.651 139.567C541.266 142.312 546.298 145.179 551.616 148.209C562.286 154.289 574.105 161.024 586.002 168.731C591.575 172.342 608.058 185.255 626.812 201.55Z' fill='url(#fill_pattern)' stroke='black' stroke-width='10'/>",
        "<path d='M81.0652 213.833L81.0653 141.584L81.0645 141.584C81.0724 140.902 81.1279 138.285 81.5298 134.294C82.0028 129.598 82.9509 123.07 84.8426 115.789C88.6638 101.081 96.1179 84.1254 110.429 72.5481C129.463 57.1495 148.891 54.0836 170.565 54.0836C177.853 54.0836 186.758 56.3356 196.395 60.1257C205.933 63.8769 215.682 68.93 224.513 74.0667C232.306 78.5994 239.288 83.1409 244.655 86.7998C238.653 89.3653 230.892 92.8104 222.198 96.9789C202.276 106.531 177.093 120.051 156.969 135.657C136.863 151.25 114.467 175.09 97.293 194.74C91.1488 201.77 85.6284 208.316 81.0652 213.833Z' fill='url(#fill_pattern)' stroke='black' stroke-width='15' transform='translate(10,55)'/><path d='M680 213.833L680 141.584L680.001 141.584C679.993 140.902 679.937 138.285 679.535 134.294C679.062 129.598 678.114 123.07 676.223 115.789C672.401 101.081 664.947 84.1254 650.637 72.5481C631.602 57.1495 612.174 54.0836 590.5 54.0836C583.212 54.0836 574.307 56.3356 564.67 60.1257C555.132 63.8769 545.383 68.93 536.552 74.0667C528.759 78.5994 521.777 83.1409 516.41 86.7998C522.412 89.3653 530.173 92.8104 538.868 96.9789C558.789 106.531 583.972 120.051 604.096 135.657C624.203 151.25 646.598 175.09 663.772 194.74C669.916 201.77 675.437 208.316 680 213.833Z' fill='url(#fill_pattern)' stroke='black' stroke-width='15' transform='translate(10,55)'/>"
    ];

    string[6] earsName = [
        "Piercing",
        "Horny",
        "Mikey",
        "Flurry",
        "UP ONLY",
        "Dong"
    ];

    string[5] eyes = [
        "<rect x='188' y='323' width='145' height='15' fill='black'/><rect x='438' y='323' width='145' height='15' fill='black'/>",
        "<path d='M307 358.376C307 347.623 276.555 376.852 239 376.852C201.445 376.852 171 347.623 171 358.376C171 369.129 201.445 397.852 239 397.852C276.555 397.852 307 369.129 307 358.376Z' fill='black'/><path d='M464 358.376C464 347.623 494.445 376.852 532 376.852C569.555 376.852 600 347.623 600 358.376C600 369.129 569.555 397.852 532 397.852C494.445 397.852 464 369.129 464 358.376Z' fill='black'/>",
        "<line x1='229.657' y1='312.343' x2='289.657' y2='372.343' stroke='black' stroke-width='16'/><line y1='-8' x2='84.8528' y2='-8' transform='matrix(-0.707107 0.707107 0.707107 0.707107 295 318)' stroke='black' stroke-width='16'/><line x1='481.657' y1='312.343' x2='541.657' y2='372.343' stroke='black' stroke-width='16'/><line y1='-8' x2='84.8528' y2='-8' transform='matrix(-0.707107 0.707107 0.707107 0.707107 547 318)' stroke='black' stroke-width='16'/>",
        "<path d='M319.68 360.028C318.88 363.73 316.274 367.137 311.678 370.052C307.07 372.975 300.664 375.262 292.797 376.711C277.078 379.607 256.134 379.048 233.751 374.216C211.368 369.384 192.058 361.254 178.934 352.131C172.366 347.566 167.473 342.841 164.481 338.277C161.498 333.726 160.528 329.547 161.327 325.845C162.126 322.143 164.733 318.737 169.329 315.821C173.937 312.898 180.343 310.611 188.21 309.162C203.928 306.266 224.872 306.825 247.256 311.657C269.639 316.489 288.948 324.62 302.073 333.742C308.641 338.307 313.533 343.033 316.525 347.596C319.509 352.148 320.479 356.326 319.68 360.028Z' fill='#FEFEFE' stroke='black' stroke-width='6'/><path d='M319.996 358.562C318.437 365.784 310.419 371.854 296.654 374.974C283.153 378.034 265.22 377.94 246.114 373.816C227.008 369.691 210.633 362.379 199.597 354.023C188.344 345.502 183.544 336.665 185.103 329.443C186.662 322.221 194.68 316.151 208.446 313.031C221.946 309.971 239.879 310.065 258.985 314.189C278.091 318.314 294.467 325.626 305.502 333.982C316.755 342.503 321.555 351.34 319.996 358.562Z' fill='#5D605F' stroke='black' stroke-width='6'/><circle cx='271.016' cy='348.5' r='19' transform='rotate(12.1814 271.016 348.5)' fill='black'/><circle cx='259.726' cy='355.782' r='9.5' transform='rotate(12.1814 259.726 355.782)' fill='#F3F1F1'/><path d='M451.318 355.028C452.117 358.73 454.724 362.137 459.319 365.052C463.928 367.975 470.334 370.262 478.2 371.711C493.919 374.607 514.863 374.048 537.246 369.216C559.629 364.384 578.939 356.254 592.064 347.131C598.632 342.566 603.524 337.841 606.516 333.277C609.5 328.726 610.469 324.547 609.67 320.845C608.871 317.143 606.264 313.737 601.668 310.821C597.06 307.898 590.654 305.611 582.788 304.162C567.069 301.266 546.125 301.825 523.742 306.657C501.358 311.489 482.049 319.62 468.924 328.742C462.356 333.307 457.464 338.033 454.472 342.596C451.488 347.148 450.519 351.326 451.318 355.028Z' fill='#FEFEFE' stroke='black' stroke-width='6'/><path d='M451.001 353.562C452.56 360.784 460.578 366.854 474.344 369.974C487.844 373.034 505.777 372.94 524.883 368.816C543.989 364.691 560.365 357.379 571.4 349.023C582.653 340.502 587.453 331.665 585.894 324.443C584.335 317.221 576.317 311.151 562.552 308.031C549.051 304.971 531.118 305.065 512.012 309.189C492.906 313.314 476.531 320.626 465.495 328.982C454.242 337.503 449.442 346.34 451.001 353.562Z' fill='#5D605F' stroke='black' stroke-width='6'/><circle r='19' transform='matrix(-0.977484 0.211008 0.211008 0.977484 499.981 343.5)' fill='black'/><circle r='9.5' transform='matrix(-0.977484 0.211008 0.211008 0.977484 511.272 350.782)' fill='#F3F1F1'/>", //asian
        "<circle cx='260' cy='314' r='81' fill='#FEFEFE' stroke='black' stroke-width='6'/><circle cx='272' cy='314' r='69' fill='#0EB39F' stroke='black' stroke-width='6'/><circle cx='291' cy='319' r='19' fill='black'/><circle cx='281.5' cy='328.5' r='9.5' fill='#F3F1F1'/><circle r='81' transform='matrix(-1 0 0 1 511 314)' fill='#FEFEFE' stroke='black' stroke-width='6'/><circle r='69' transform='matrix(-1 0 0 1 499 314)' fill='#0EB29F' stroke='black' stroke-width='6'/><circle r='19' transform='matrix(-1 0 0 1 480 319)' fill='black'/><circle r='9.5' transform='matrix(-1 0 0 1 489.5 328.5)' fill='#F3F1F1'/>"
    ];

    string[5] eyesName = [
        "Blazed", //straight lines
        "Down", //down/unhapy
        "X X", //xx
        "Asian", //assian
        "CUTIEEE!" //caucasian
    ];

    string[5] noses = [
        "<path d='M425 390.221C425 396.546 407.315 383.974 385.5 383.974C363.685 383.974 346 396.546 346 390.221C346 383.895 363.685 372 385.5 372C407.315 372 425 383.895 425 390.221Z' fill='black'/>",
        "<rect x='367' y='365' width='36' height='36' rx='10' fill='black'/>",
        "<path d='M385 407L409.249 365H360.751L385 407Z' fill='black'/>",
        "<path d='M407.498 367.633C420.998 374.633 403.998 401.133 386.498 407.133C370.498 400.633 348.998 382.633 361.998 367.633C376.998 359.633 379.998 372.133 386.498 375.133C390.998 372.633 394.498 360.892 407.498 367.633Z' fill='black'/>",
        "<ellipse cx='385.5' cy='385.5' rx='37.5' ry='17.5' fill='black'/>"
    ];

    string[5] nosesName = ["Gigi", "SQUARED", "Down Only", "LUV LUV", "Elli"];

    string[7] mouths = [
        "<rect x='288' y='451' width='194' height='15' fill='#0F0E0E'/>",
        "<path d='M466 447.008C466 442.49 429.959 447.008 385.5 447.008C341.041 447.008 305 442.49 305 447.008C305 451.526 341.041 501 385.5 501C429.959 501 466 451.526 466 447.008Z' fill='black'/>",
        "<path d='M457 451.262C457 447.267 424.765 490.32 385 490.32C345.235 490.32 313 447.267 313 451.262C313 455.256 345.235 499 385 499C424.765 499 457 455.256 457 451.262Z' fill='black'/>",
        "<path d='M457 469.738C457 473.733 424.765 430.68 385 430.68C345.235 430.68 313 473.733 313 469.738C313 465.744 345.235 422 385 422C424.765 422 457 465.744 457 469.738Z' fill='black'/>",
        "<path d='M456.427 482.824C446.784 500.503 437.575 514.405 426.522 523.909C415.61 533.291 402.764 538.5 385.5 538.5C368.511 538.5 356.263 531.751 346.593 521.532C336.796 511.179 329.664 497.279 323.185 483.05C316.252 467.82 315.062 458.415 316.698 452.725C318.191 447.534 322.354 444.576 329.396 443.114C336.537 441.632 345.767 441.911 355.814 442.639C358.406 442.827 361.053 443.045 363.716 443.264C371.157 443.877 378.716 444.5 385.5 444.5C390.596 444.5 396.476 444.267 402.553 444.027C407.212 443.843 411.986 443.654 416.612 443.562C427.556 443.344 438.124 443.639 446.545 445.539C455.068 447.462 460.396 450.792 462.438 455.818C464.528 460.959 463.796 469.315 456.427 482.824Z' fill='black' stroke='black' stroke-width='7'/>",
        "<path d='M456.427 482.824C446.784 500.503 437.575 514.405 426.522 523.909C415.61 533.291 402.764 538.5 385.5 538.5C368.511 538.5 356.263 531.751 346.593 521.532C336.796 511.179 329.664 497.279 323.185 483.05C316.252 467.82 315.062 458.415 316.698 452.725C318.191 447.534 322.354 444.576 329.396 443.114C336.537 441.632 345.767 441.911 355.814 442.639C358.406 442.827 361.053 443.045 363.716 443.264C371.157 443.877 378.716 444.5 385.5 444.5C390.596 444.5 396.476 444.267 402.553 444.027C407.212 443.843 411.986 443.654 416.612 443.562C427.556 443.344 438.124 443.639 446.545 445.539C455.068 447.462 460.396 450.792 462.438 455.818C464.528 460.959 463.796 469.315 456.427 482.824Z' fill='black' stroke='black' stroke-width='7'/><path d='M386.551 503.846L387.781 504.256L388.922 503.641C397.948 498.781 408.907 498.019 417.543 500.31C426.381 502.654 431.5 507.698 431.5 513.5C431.5 519.711 426.43 526.053 417.692 531.048C409.122 535.946 397.885 539 387.5 539C377.099 539 365.078 535.938 355.719 530.999C351.048 528.534 347.173 525.671 344.503 522.618C341.836 519.57 340.5 516.495 340.5 513.5C340.5 507.667 344.918 503.156 353.633 501.078C362.274 499.018 374.192 499.726 386.551 503.846Z' fill='#FF8181' stroke='black' stroke-width='6'/>",
        "/><path d='M447.5 484.5C447.5 513.909 420.184 538.5 385.5 538.5C350.816 538.5 323.5 513.909 323.5 484.5C323.5 455.091 350.816 430.5 385.5 430.5C420.184 430.5 447.5 455.091 447.5 484.5Z' fill='black' stroke='black' stroke-width='7'/><path d='M386.551 503.846L387.781 504.256L388.922 503.641C397.948 498.781 408.907 498.019 417.543 500.31C426.381 502.654 431.5 507.698 431.5 513.5C431.5 519.711 426.43 526.053 417.692 531.048C409.122 535.946 397.885 539 387.5 539C377.099 539 365.078 535.938 355.719 530.999C351.048 528.534 347.173 525.671 344.503 522.618C341.836 519.57 340.5 516.495 340.5 513.5C340.5 507.667 344.918 503.156 353.633 501.078C362.274 499.018 374.192 499.726 386.551 503.846Z' fill='#FF8181' stroke='black' stroke-width='6'/>"
    ];

    string[7] mouthsName = [
        "Rekt", //straight line
        "Happy", //happy full
        "HAPPY * 2", //happy thin
        "GRUUMPY", //grumpy smile down
        "WOW", //open mouth square
        "OMG", ///open mouth tongue
        "GMO" ///open mouth tongue circle
    ];

    string[4][8] colors = [
        [
            // Gradient
            "<radialGradient id='fill_pattern' notused='",
            "' gradientUnits='userSpaceOnUse' ><stop offset='0%' stop-color='",
            "'/><stop offset='100%' stop-color='",
            "'/></radialGradient>"
        ],
        [
            // https://pattern.monster/scales-3/
            "<pattern id='fill_pattern' patternUnits='userSpaceOnUse' width='25' height='13' patternTransform='scale(3) rotate(",
            ")'><rect x='0' y='0' width='100%' height='100%' fill='hsla(0,0%,100%,1)'/><path d='M15.044 22.25a2.5 2.5 0 01-2.5 2.5 2.5 2.5 0 01-2.5-2.5 2.5 2.5 0 012.5-2.5 2.5 2.5 0 012.5 2.5m2.5 0a5 5 0 01-5 5 5 5 0 01-5-5 5 5 0 015-5 5 5 0 015 5m2.5 0a7.5 7.5 0 01-7.5 7.5 7.5 7.5 0 01-7.5-7.5 7.5 7.5 0 017.5-7.5 7.5 7.5 0 017.5 7.5m2.5 0a10 10 0 01-10 10 10 10 0 01-10-10 10 10 0 0110-10 10 10 0 0110 10m2.5 0a12.5 12.5 0 01-12.5 12.5 12.5 12.5 0 01-12.5-12.5 12.5 12.5 0 0112.5-12.5 12.5 12.5 0 0112.5 12.5m0-9a2.5 2.5 0 00-2.363 1.688 12.5 12.5 0 011.672 3.212 12.5 12.5 0 010 .002 2.5 2.5 0 00.69.098 2.5 2.5 0 002.5-2.5 2.5 2.5 0 00-2.5-2.5zm0-2.5a5 5 0 00-4.143 2.203 12.5 12.5 0 014.053 7.795 5 5 0 00.09.002 5 5 0 005-5 5 5 0 00-5-5zm-.037-2.5a7.5 7.5 0 00-6.125 3.227 12.5 12.5 0 016.162 10.773 12.5 12.5 0 01-.041 1 7.5 7.5 0 00.04 0 7.5 7.5 0 007.5-7.5 7.5 7.5 0 00-7.5-7.5 7.5 7.5 0 00-.036 0zm.017-2.5a10 10 0 00-8.441 4.672 12.5 12.5 0 018.46 11.828 12.5 12.5 0 01-.495 3.488 10 10 0 00.496.012 10 10 0 0010-10 10 10 0 00-10-10 10 10 0 00-.02 0zm.006-2.5a12.5 12.5 0 00-10.998 6.588 12.5 12.5 0 01.29.039 12.5 12.5 0 01.005 0 12.5 12.5 0 01.29.045 12.5 12.5 0 01.003 0 12.5 12.5 0 01.58.113 12.5 12.5 0 01.004 0 12.5 12.5 0 011.123.3 12.5 12.5 0 01.02.007 12.5 12.5 0 01.006.002 12.5 12.5 0 01.277.093 12.5 12.5 0 01.8.31 12.5 12.5 0 01.032.01 12.5 12.5 0 01.033.016 12.5 12.5 0 01.492.223 12.5 12.5 0 01.016.008 12.5 12.5 0 01.004.002 12.5 12.5 0 01.523.271 12.5 12.5 0 01.006.002 12.5 12.5 0 01.254.143 12.5 12.5 0 01.004.002 12.5 12.5 0 01.252.15 12.5 12.5 0 01.004.002 12.5 12.5 0 01.248.156 12.5 12.5 0 01.004.002 12.5 12.5 0 01.244.16 12.5 12.5 0 01.004.002 12.5 12.5 0 01.24.168 12.5 12.5 0 01.004.002 12.5 12.5 0 01.236.174 12.5 12.5 0 01.004.002 12.5 12.5 0 01.233.18 12.5 12.5 0 01.004.002 12.5 12.5 0 01.228.183 12.5 12.5 0 01.004.002 12.5 12.5 0 01.223.19 12.5 12.5 0 01.004.002 12.5 12.5 0 01.218.195 12.5 12.5 0 01.032.03 12.5 12.5 0 01.185.173 12.5 12.5 0 01.004.002 12.5 12.5 0 01.209.205 12.5 12.5 0 01.004.004 12.5 12.5 0 01.205.21 12.5 12.5 0 01.002.001 12.5 12.5 0 01.2.215 12.5 12.5 0 01.003.004 12.5 12.5 0 01.193.219 12.5 12.5 0 01.004.003 12.5 12.5 0 01.19.223 12.5 12.5 0 01.004.004 12.5 12.5 0 01.363.463 12.5 12.5 0 01.004.004 12.5 12.5 0 01.172.236 12.5 12.5 0 01.004.004 12.5 12.5 0 01.166.24 12.5 12.5 0 01.002.004 12.5 12.5 0 01.162.244 12.5 12.5 0 01.002.004 12.5 12.5 0 01.156.248 12.5 12.5 0 01.03.05 12.5 12.5 0 01.251.437 12.5 12.5 0 01.016.029 12.5 12.5 0 01.01.02 12.5 12.5 0 01.263.507 12.5 12.5 0 01.002.004 12.5 12.5 0 01.125.266 12.5 12.5 0 01.002.004 12.5 12.5 0 01.118.267 12.5 12.5 0 01.002.004 12.5 12.5 0 01.113.272 12.5 12.5 0 01.002.004 12.5 12.5 0 01.105.273 12.5 12.5 0 01.002.004 12.5 12.5 0 01.098.275 12.5 12.5 0 01.002.004 12.5 12.5 0 01.092.278 12.5 12.5 0 01.002.003 12.5 12.5 0 01.086.282 12.5 12.5 0 01.002.004 12.5 12.5 0 01.078.28 12.5 12.5 0 01.002.005 12.5 12.5 0 01.072.285 12.5 12.5 0 01.002.004 12.5 12.5 0 01.067.285 12.5 12.5 0 01.023.121 12.5 12.5 0 01.035.17 12.5 12.5 0 01.086.496 12.5 12.5 0 01.014.09 12.5 12.5 0 010 .004 12.5 12.5 0 01.039.29 12.5 12.5 0 01.008.075 12.5 12.5 0 01.045.467 12.5 12.5 0 01.003.05 12.5 12.5 0 01.002.04 12.5 12.5 0 01.028.535 12.5 12.5 0 010 .02 12.5 12.5 0 010 .003 12.5 12.5 0 01.004.293 12.5 12.5 0 010 .014 12.5 12.5 0 01-.127 1.777 12.5 12.5 0 01-.1.586 12.5 12.5 0 01-.058.291 12.5 12.5 0 010 .002 12.5 12.5 0 01-.141.576 12.5 12.5 0 01-.08.287 12.5 12.5 0 01-.182.567 12.5 12.5 0 01-.207.557 12.5 12.5 0 01-.234.546 12.5 12.5 0 01-.26.536 12.5 12.5 0 01-.1.187 12.5 12.5 0 001.488.088 12.5 12.5 0 0012.5-12.5 12.5 12.5 0 00-12.5-12.5 12.5 12.5 0 00-.014 0zm-24.986 10a2.5 2.5 0 00-2.5 2.5 2.5 2.5 0 002.5 2.5 2.5 2.5 0 00.691-.098 12.5 12.5 0 011.672-3.214A2.5 2.5 0 00.044 13.25zm0-2.5a5 5 0 00-5 5 5 5 0 005 5 5 5 0 00.09-.002 12.5 12.5 0 014.054-7.795A5 5 0 00.044 10.75zm-.037-2.5a7.5 7.5 0 00-7.463 7.5 7.5 7.5 0 007.5 7.5 7.5 7.5 0 00.041 0 12.5 12.5 0 01-.041-1 12.5 12.5 0 016.162-10.773A7.5 7.5 0 00.044 8.25a7.5 7.5 0 00-.037 0zm.017-2.5a10 10 0 00-9.98 10 10 10 0 0010 10 10 10 0 00.498-.014 12.5 12.5 0 01-.498-3.486 12.5 12.5 0 018.46-11.828A10 10 0 00.045 5.75a10 10 0 00-.02 0zm-.082-2.5a12.5 12.5 0 00-12.486 12.5 12.5 12.5 0 0012.5 12.5 12.5 12.5 0 001.57-.1 12.5 12.5 0 01-1.482-5.9 12.5 12.5 0 0110.93-12.4A12.5 12.5 0 00-.044 3.25a12.5 12.5 0 00-.014 0zm12.602 3.5a2.5 2.5 0 00-2.39 1.773 12.5 12.5 0 01.82 1.327 12.5 12.5 0 011.57-.1 12.5 12.5 0 011.488.088 12.5 12.5 0 01.875-1.399 2.5 2.5 0 00-2.363-1.689zm0-2.5a5 5 0 00-4.178 2.256 12.5 12.5 0 012.608 3.344 12.5 12.5 0 011.57-.1 12.5 12.5 0 011.488.088 12.5 12.5 0 012.658-3.383 5 5 0 00-4.146-2.205zm-.037-2.5a7.5 7.5 0 00-6.15 3.266 12.5 12.5 0 014.617 4.834 12.5 12.5 0 011.57-.1 12.5 12.5 0 011.488.088 12.5 12.5 0 014.676-4.861 7.5 7.5 0 00-6.164-3.227 7.5 7.5 0 00-.037 0zm5.226 9.129a12.5 12.5 0 01.254.117 12.5 12.5 0 00-.254-.117zM12.524-.75a10 10 0 00-8.457 4.695 12.5 12.5 0 016.907 5.905 12.5 12.5 0 011.57-.1 12.5 12.5 0 011.488.088 12.5 12.5 0 016.973-5.916A10 10 0 0012.544-.75a10 10 0 00-.02 0zm5.21 11.629a12.5 12.5 0 01.253.117 12.5 12.5 0 00-.254-.117zM12.53-3.25a12.5 12.5 0 00-11.004 6.6 12.5 12.5 0 019.448 6.5 12.5 12.5 0 011.57-.1 12.5 12.5 0 011.488.088 12.5 12.5 0 019.526-6.498 12.5 12.5 0 00-11.014-6.59 12.5 12.5 0 00-.014 0zm5.203 14.129a12.5 12.5 0 01.254.117 12.5 12.5 0 00-.254-.117zM25.043.25a2.5 2.5 0 00-2.362 1.688 12.5 12.5 0 01.877 1.4 12.5 12.5 0 011.472-.088 12.5 12.5 0 01.014 0 12.5 12.5 0 012.389.23 2.5 2.5 0 00.11-.73 2.5 2.5 0 00-2.5-2.5zm0-2.5A5 5 0 0020.9-.047a12.5 12.5 0 012.659 3.385 12.5 12.5 0 011.472-.088 12.5 12.5 0 01.014 0 12.5 12.5 0 014.783.953 5 5 0 00.217-1.453 5 5 0 00-5-5zm-.036-2.5a7.5 7.5 0 00-6.125 3.227 12.5 12.5 0 014.676 4.86 12.5 12.5 0 011.472-.087 12.5 12.5 0 01.014 0 12.5 12.5 0 017.014 2.152 7.5 7.5 0 00.486-2.652 7.5 7.5 0 00-7.5-7.5 7.5 7.5 0 00-.037 0zm.017-2.5a10 10 0 00-8.441 4.672 12.5 12.5 0 016.975 5.916 12.5 12.5 0 011.472-.088 12.5 12.5 0 01.014 0 12.5 12.5 0 019.01 3.838 10 10 0 00.99-4.338 10 10 0 00-10-10 10 10 0 00-.02 0zm.006-2.5a12.5 12.5 0 00-10.998 6.59 12.5 12.5 0 019.526 6.498 12.5 12.5 0 011.472-.088 12.5 12.5 0 01.014 0 12.5 12.5 0 0110.678 6 12.5 12.5 0 001.822-6.5 12.5 12.5 0 00-12.5-12.5 12.5 12.5 0 00-.014 0zM14.69 8.75a12.5 12.5 0 00-.128.197 12.5 12.5 0 01.128-.197zm3.043 2.129a12.5 12.5 0 01.254.117 12.5 12.5 0 00-.254-.117zM.043.25a2.5 2.5 0 00-2.5 2.5 2.5 2.5 0 00.106.717A12.5 12.5 0 01-.058 3.25a12.5 12.5 0 01.014 0 12.5 12.5 0 011.57.1 12.5 12.5 0 01.881-1.41A2.5 2.5 0 00.044.25zm0-2.5a5 5 0 00-5 5 5 5 0 00.208 1.42 12.5 12.5 0 014.691-.92 12.5 12.5 0 01.014 0 12.5 12.5 0 011.57.1A12.5 12.5 0 014.19-.045 5 5 0 00.044-2.25zm-.036-2.5a7.5 7.5 0 00-7.463 7.5 7.5 7.5 0 00.469 2.605A12.5 12.5 0 01-.057 3.25a12.5 12.5 0 01.013 0 12.5 12.5 0 011.57.1 12.5 12.5 0 014.682-4.873A7.5 7.5 0 00.044-4.75a7.5 7.5 0 00-.037 0zm.017-2.5a10 10 0 00-9.98 10 10 10 0 00.96 4.275A12.5 12.5 0 01-.057 3.25a12.5 12.5 0 01.014 0 12.5 12.5 0 011.57.1 12.5 12.5 0 016.979-5.928A10 10 0 00.044-7.25a10 10 0 00-.02 0zm.006-2.5a12.5 12.5 0 00-12.486 12.5 12.5 12.5 0 001.78 6.428A12.5 12.5 0 01-.059 3.25a12.5 12.5 0 01.014 0 12.5 12.5 0 011.57.1 12.5 12.5 0 019.532-6.51A12.5 12.5 0 00.044-9.75a12.5 12.5 0 00-.014 0zM9.722 7.951a12.5 12.5 0 01.12.154 12.5 12.5 0 00-.12-.154z'  stroke-width='0.5' stroke='",
            "' fill='",
            "'/></pattern>"
        ],
        [
            // zebra
            "<pattern id='fill_pattern' patternUnits='userSpaceOnUse' width='100' height='100' patternTransform='scale(5) rotate(",
            ")'><rect x='0' y='0' width='100%' height='100%' fill='",
            "'/><path d='M100 20.234v41.641q-6.719 7.656-10.234 17.812-3.36 9.766-3.125 20.313h-3.438v-4.531q0-2.657.39-4.532l.626-3.359.703-3.281 2.265-7.656q1.329-4.22 2.813-7.344.781-1.719 2.812-4.453l2.891-4.297.86-2.578.312-2.735q.156-5-.547-13.203l-2.344-20.937Q92.656 8.516 92.422 0h6.797q-.078 6.172.078 10.156.156 5.547.703 10.078m0 49.532v20.468q-.469 2.11-.703 4.844L99.063 100H92.5l-.078-8.594q0-5.156.547-8.515.469-3.047 2.89-6.797L100 69.766M79.219 100h-3.672l.39-8.36.938-8.359q1.016-6.953 1.875-10.781 1.328-5.86 3.36-10.313l2.5-6.015 1.562-6.328.547-5q.078-2.813-.703-4.844l-3.282-9.531-3.28-9.531q-1.876-6.094-2.735-10.313Q75.547 4.922 75.547 0h3.672q.078 8.516 2.422 17.031 2.343 8.282 6.718 15.782l-2.03-11.016-1.876-11.016-.86-5.312L83.126 0h3.516l.234 4.531.547 4.532 2.5 16.25 2.422 16.328q1.015 8.125.156 15.625l-.625 3.28q-.547 1.798-1.562 2.97l-1.875 1.953q-1.094 1.172-1.641 2.187-1.64 2.735-2.89 7.813l-2.423 8.047q-1.406 3.515-1.875 8.125-.39 3.125-.39 8.359m-6.406 0H64.53q-2.11-9.922-1.718-18.828.39-4.922 1.796-8.203l2.97-7.5q1.405-4.219 1.718-7.89.312-2.735-.39-5.313-.704-2.657-2.345-4.844-2.343-3.125-5.78-6.328l-.938 2.5-.86 2.656q-2.343 6.797-4.922 11.953-3.125 6.25-7.03 10.86-1.485 2.265-2.579 5.312-.781 2.344-1.484 5.781Q41.25 88.75 41.25 100h-6.484l.312-12.266q.39-6.718 1.64-12.265 1.72-7.344 4.844-11.407l2.344-2.5 2.344-2.5q2.5-2.968 3.906-6.875 1.328-3.671 1.485-7.734.156-5.156-.86-12.5L48.906 19.61Q47.578 8.516 47.97 0h10.078q-.625 12.188 1.875 22.11 2.422 9.218 8.515 16.25l5 5.234q3.047 3.203 4.375 5.781 2.657 4.922.938 12.266-1.016 4.609-3.906 10.859-1.172 2.578-1.797 5.86-.547 2.5-.781 6.093-.391 7.266.546 15.547m-14.765 0H47.969V89.453q.312-5.937 1.718-10.39 4.297-12.657 10.157-22.813l1.797-3.047 2.109-2.812q1.25 4.687-1.094 11.562-5.625 16.953-4.61 38.047m-29.296 0H17.969l.234-5.781.469-5.782L21.25 65.86l2.422-22.578q1.172-12.031-1.875-21.797-1.719 3.047-2.969 7.5l-2.031 7.813q-.469 1.719-.547 4.219l.078 4.218-.547 11.094-1.797 10.469Q12.5 74.062 12.11 77.266q-.39 2.734-.312 6.406l.234 6.406.39 5q.235 2.813.704 4.922H5.781V81.25l-.078-6.016Q1.563 81.797 0 89.844v-20.39q5.86-10.47 7.422-22.657 1.25-9.14.078-23.36L6.406 11.72Q5.86 4.844 5.781 0h7.344l1.406 11.328 1.094 11.328q1.25-2.422 1.797-6.015l.625-6.25.078-5.157L17.969 0h10.86q.077 2.969.702 6.953l1.172 6.797 1.64 11.094q.626 6.172.157 11.172-.547 4.297-2.031 9.687L27.5 55.078q-2.031 6.719-2.344 14.531-.078 3.75.625 8.36l1.563 8.203.703-2.422 4.531-18.672q2.344-10.312 3.594-18.828.625-3.984.625-9.062l-.313-9.141-1.093-13.984Q34.688 5.547 34.766 0h6.484q-.078 8.984 1.953 19.688l1.64 8.75q.938 5.078.938 8.75 0 3.828-1.015 7.5-.938 3.671-2.813 6.874-4.61 9.375-7.812 20.47-2.813 9.687-4.766 21.405-.703 3.75-.625 6.563M0 61.797V19.766l.781 4.375.703 4.453 2.344 13.984.235 1.563.234 2.343Q5.078 54.61 0 61.797M64.61 0h8.202q-.39 7.266.157 11.953l.86 4.531 1.25 4.532 3.593 13.672 3.36 13.671.546 2.657.156 2.656-2.343-6.406q-1.407-3.516-3.047-6.172l-4.14-6.64-4.298-6.563q-1.172-1.953-1.875-4.61-.547-1.875-.937-4.922Q64.844 9.453 64.609 0'  stroke-width='5' stroke='none' fill='",
            "'/></pattern>"
        ],
        [
            //dots
            "<pattern id='fill_pattern' patternUnits='userSpaceOnUse' width='40' height='40' patternTransform='scale(2) rotate(",
            ")'><rect x='0' y='0' width='100%' height='100%' fill='",
            "'/><path d='M11 6a5 5 0 01-5 5 5 5 0 01-5-5 5 5 0 015-5 5 5 0 015 5'  stroke-width='1' stroke='none' fill='",
            "'/></pattern>"
        ],
        [
            "<pattern id='fill_pattern' patternUnits='userSpaceOnUse' width='20' height='20' patternTransform='scale(2) rotate(",
            ")'><rect x='0' y='0' width='100%' height='100%' fill='hsla(0,0%,100%,1)'/><path d='M 10,-2.55e-7 V 20 Z M -1.1677362e-8,10 H 20 Z'  stroke-width='1' stroke='",
            "' fill='",
            "'/></pattern>"
        ],
        [
            "<pattern id='fill_pattern' patternUnits='userSpaceOnUse' width='40' height='40' patternTransform='scale(2) rotate(",
            ")'><rect x='0' y='0' width='100%' height='100%' fill='",
            "'/><path d='M46.231 19.999a5.937 7.48 0 01-5.937 7.48A5.937 7.48 0 0134.357 20a5.937 7.48 0 015.937-7.48 5.937 7.48 0 015.937 7.48zm-40.421 0a5.937 7.48 0 01-5.937 7.48A5.937 7.48 0 01-6.064 20a5.937 7.48 0 015.937-7.48 5.937 7.48 0 015.937 7.48zm20.21 20.285a5.937 7.48 0 01-5.937 7.48 5.937 7.48 0 01-5.936-7.48 5.937 7.48 0 015.936-7.48 5.937 7.48 0 015.937 7.48zm0-40.57a5.937 7.48 0 01-5.937 7.48 5.937 7.48 0 01-5.936-7.48 5.937 7.48 0 015.936-7.48 5.937 7.48 0 015.937 7.48zM-5.732 46.942c1.676-.944 3.556-1.6 5.478-1.587 1.924.011 3.796.69 5.463 1.653 1.668.962 3.156 2.202 4.637 3.434 1.48 1.233 2.97 2.471 4.641 3.428 1.67.957 3.547 1.627 5.47 1.627 1.924 0 3.8-.67 5.47-1.627s3.161-2.195 4.642-3.428c1.48-1.232 2.968-2.472 4.636-3.434 1.667-.963 3.54-1.642 5.463-1.653 1.922-.012 3.802.643 5.479 1.587V33.628c-1.677.944-3.557 1.6-5.479 1.587-1.923-.011-3.796-.69-5.463-1.653-1.668-.962-3.156-2.202-4.636-3.434-1.48-1.233-2.971-2.471-4.642-3.428-1.67-.957-3.546-1.627-5.47-1.627-1.923 0-3.8.67-5.47 1.627s-3.161 2.195-4.641 3.428c-1.48 1.232-2.97 2.472-4.637 3.434-1.667.963-3.54 1.641-5.463 1.653-1.922.012-3.802-.643-5.478-1.587zM45.647-6.943c-1.677.944-3.557 1.6-5.479 1.587-1.923-.011-3.796-.69-5.463-1.653-1.668-.962-3.156-2.202-4.636-3.434-1.48-1.233-2.971-2.471-4.642-3.428-1.67-.957-3.546-1.627-5.47-1.627-1.923 0-3.8.67-5.47 1.627s-3.161 2.195-4.641 3.428c-1.48 1.232-2.97 2.472-4.637 3.434-1.667.963-3.54 1.642-5.463 1.653-1.922.012-3.802-.643-5.478-1.587V6.372c1.676-.944 3.556-1.6 5.478-1.587 1.924.012 3.796.69 5.463 1.653C6.877 7.4 8.365 8.64 9.846 9.872c1.48 1.233 2.97 2.471 4.641 3.428 1.67.957 3.547 1.627 5.47 1.627 1.924 0 3.8-.67 5.47-1.627s3.161-2.195 4.642-3.428c1.48-1.232 2.968-2.472 4.636-3.434 1.667-.963 3.54-1.642 5.463-1.653 1.922-.012 3.802.643 5.479 1.587z'  stroke-width='1' stroke='none' fill='",
            "'/></pattern>"
        ],
        [
            "<pattern id='fill_pattern' patternTransform='rotate(",
            ")'  width='192' height='192' patternUnits='userSpaceOnUse'> <rect x='0' y='0' width='100%' height='100%' fill='",
            "'/><path stroke='",
            "' d='M192 15v2a11 11 0 0 0-11 11c0 1.94 1.16 4.75 2.53 6.11l2.36 2.36a6.93 6.93 0 0 1 1.22 7.56l-.43.84a8.08 8.08 0 0 1-6.66 4.13H145v35.02a6.1 6.1 0 0 0 3.03 4.87l.84.43c1.58.79 4 .4 5.24-.85l2.36-2.36a12.04 12.04 0 0 1 7.51-3.11 13 13 0 1 1 .02 26 12 12 0 0 1-7.53-3.11l-2.36-2.36a4.93 4.93 0 0 0-5.24-.85l-.84.43a6.1 6.1 0 0 0-3.03 4.87V143h35.02a8.08 8.08 0 0 1 6.66 4.13l.43.84a6.91 6.91 0 0 1-1.22 7.56l-2.36 2.36A10.06 10.06 0 0 0 181 164a11 11 0 0 0 11 11v2a13 13 0 0 1-13-13 12 12 0 0 1 3.11-7.53l2.36-2.36a4.93 4.93 0 0 0 .85-5.24l-.43-.84a6.1 6.1 0 0 0-4.87-3.03H145v35.02a8.08 8.08 0 0 1-4.13 6.66l-.84.43a6.91 6.91 0 0 1-7.56-1.22l-2.36-2.36A10.06 10.06 0 0 0 124 181a11 11 0 0 0-11 11h-2a13 13 0 0 1 13-13c2.47 0 5.79 1.37 7.53 3.11l2.36 2.36a4.94 4.94 0 0 0 5.24.85l.84-.43a6.1 6.1 0 0 0 3.03-4.87V145h-35.02a8.08 8.08 0 0 1-6.66-4.13l-.43-.84a6.91 6.91 0 0 1 1.22-7.56l2.36-2.36A10.06 10.06 0 0 0 107 124a11 11 0 0 0-22 0c0 1.94 1.16 4.75 2.53 6.11l2.36 2.36a6.93 6.93 0 0 1 1.22 7.56l-.43.84a8.08 8.08 0 0 1-6.66 4.13H49v35.02a6.1 6.1 0 0 0 3.03 4.87l.84.43c1.58.79 4 .4 5.24-.85l2.36-2.36a12.04 12.04 0 0 1 7.51-3.11A13 13 0 0 1 81 192h-2a11 11 0 0 0-11-11c-1.94 0-4.75 1.16-6.11 2.53l-2.36 2.36a6.93 6.93 0 0 1-7.56 1.22l-.84-.43a8.08 8.08 0 0 1-4.13-6.66V145H11.98a6.1 6.1 0 0 0-4.87 3.03l-.43.84c-.79 1.58-.4 4 .85 5.24l2.36 2.36a12.04 12.04 0 0 1 3.11 7.51A13 13 0 0 1 0 177v-2a11 11 0 0 0 11-11c0-1.94-1.16-4.75-2.53-6.11l-2.36-2.36a6.93 6.93 0 0 1-1.22-7.56l.43-.84a8.08 8.08 0 0 1 6.66-4.13H47v-35.02a6.1 6.1 0 0 0-3.03-4.87l-.84-.43c-1.59-.8-4-.4-5.24.85l-2.36 2.36A12 12 0 0 1 28 109a13 13 0 1 1 0-26c2.47 0 5.79 1.37 7.53 3.11l2.36 2.36a4.94 4.94 0 0 0 5.24.85l.84-.43A6.1 6.1 0 0 0 47 84.02V49H11.98a8.08 8.08 0 0 1-6.66-4.13l-.43-.84a6.91 6.91 0 0 1 1.22-7.56l2.36-2.36A10.06 10.06 0 0 0 11 28 11 11 0 0 0 0 17v-2a13 13 0 0 1 13 13c0 2.47-1.37 5.79-3.11 7.53l-2.36 2.36a4.94 4.94 0 0 0-.85 5.24l.43.84A6.1 6.1 0 0 0 11.98 47H47V11.98a8.08 8.08 0 0 1 4.13-6.66l.84-.43a6.91 6.91 0 0 1 7.56 1.22l2.36 2.36A10.06 10.06 0 0 0 68 11 11 11 0 0 0 79 0h2a13 13 0 0 1-13 13 12 12 0 0 1-7.53-3.11l-2.36-2.36a4.93 4.93 0 0 0-5.24-.85l-.84.43A6.1 6.1 0 0 0 49 11.98V47h35.02a8.08 8.08 0 0 1 6.66 4.13l.43.84a6.91 6.91 0 0 1-1.22 7.56l-2.36 2.36A10.06 10.06 0 0 0 85 68a11 11 0 0 0 22 0c0-1.94-1.16-4.75-2.53-6.11l-2.36-2.36a6.93 6.93 0 0 1-1.22-7.56l.43-.84a8.08 8.08 0 0 1 6.66-4.13H143V11.98a6.1 6.1 0 0 0-3.03-4.87l-.84-.43c-1.59-.8-4-.4-5.24.85l-2.36 2.36A12 12 0 0 1 124 13a13 13 0 0 1-13-13h2a11 11 0 0 0 11 11c1.94 0 4.75-1.16 6.11-2.53l2.36-2.36a6.93 6.93 0 0 1 7.56-1.22l.84.43a8.08 8.08 0 0 1 4.13 6.66V47h35.02a6.1 6.1 0 0 0 4.87-3.03l.43-.84c.8-1.59.4-4-.85-5.24l-2.36-2.36A12 12 0 0 1 179 28a13 13 0 0 1 13-13zM84.02 143a6.1 6.1 0 0 0 4.87-3.03l.43-.84c.8-1.59.4-4-.85-5.24l-2.36-2.36A12 12 0 0 1 83 124a13 13 0 1 1 26 0c0 2.47-1.37 5.79-3.11 7.53l-2.36 2.36a4.94 4.94 0 0 0-.85 5.24l.43.84a6.1 6.1 0 0 0 4.87 3.03H143v-35.02a8.08 8.08 0 0 1 4.13-6.66l.84-.43a6.91 6.91 0 0 1 7.56 1.22l2.36 2.36A10.06 10.06 0 0 0 164 107a11 11 0 0 0 0-22c-1.94 0-4.75 1.16-6.11 2.53l-2.36 2.36a6.93 6.93 0 0 1-7.56 1.22l-.84-.43a8.08 8.08 0 0 1-4.13-6.66V49h-35.02a6.1 6.1 0 0 0-4.87 3.03l-.43.84c-.79 1.58-.4 4 .85 5.24l2.36 2.36a12.04 12.04 0 0 1 3.11 7.51A13 13 0 1 1 83 68a12 12 0 0 1 3.11-7.53l2.36-2.36a4.93 4.93 0 0 0 .85-5.24l-.43-.84A6.1 6.1 0 0 0 84.02 49H49v35.02a8.08 8.08 0 0 1-4.13 6.66l-.84.43a6.91 6.91 0 0 1-7.56-1.22l-2.36-2.36A10.06 10.06 0 0 0 28 85a11 11 0 0 0 0 22c1.94 0 4.75-1.16 6.11-2.53l2.36-2.36a6.93 6.93 0 0 1 7.56-1.22l.84.43a8.08 8.08 0 0 1 4.13 6.66V143h35.02z'></path></pattern>"
        ],
        [
            "<pattern id='fill_pattern' patternUnits='userSpaceOnUse' width='70' height='8' patternTransform='scale(3) rotate(",
            ")'><rect x='0' y='0' width='100%' height='100%' fill='",
            "'/><path d='M-.02 22c8.373 0 11.938-4.695 16.32-9.662C20.785 7.258 25.728 2 35 2c9.272 0 14.215 5.258 18.7 10.338C58.082 17.305 61.647 22 70.02 22M-.02 14.002C8.353 14 11.918 9.306 16.3 4.339 20.785-.742 25.728-6 35-6 44.272-6 49.215-.742 53.7 4.339c4.382 4.967 7.947 9.661 16.32 9.664M70 6.004c-8.373-.001-11.918-4.698-16.3-9.665C49.215-8.742 44.272-14 35-14c-9.272 0-14.215 5.258-18.7 10.339C11.918 1.306 8.353 6-.02 6.002'  stroke-width='1' stroke='",
            "' fill='none'/></pattern>"
        ]
    ];

    string[8] colorName = [
        "UNI",
        "Kimono",
        "Jungle",
        "Polka",
        "Crosses",
        "Okosa",
        "GM",
        "Wavey"
    ];

    string[2][17] colorPalette = [
        ["#3A5BD0", "#D9FAFC"],
        ["#FCD9EC", "#D9FAFC"],
        ["#7A5B46", "#D9FAFC"],
        ["#A6BDE5", "#FDFDFD"],
        ["#FF8484", "#DFCCCC"],
        ["#DACCDF", "#8C7F91"],
        ["#F7DC6F", "#D9FAFC"],
        ["#2ECC71", "#D9FAFC"],
        ["#6495ED", "#40E0D0"],
        ["#30E8BF", "#FF8235"],
        ["#DD5E89", "#F7BB97"],
        ["#20BDFF", "#A5FECB"],
        ["#F49390", "#C45AB3"],
        ["#ffd6a5", "#9bf6ff"],
        ["#25a244", "#92e6a7"],
        ["#ff86c8", "#ffbf81"],
        ["#f3c4fb", "#e5b3fe"]
    ];

    string[17] colorPaletteNanes = [
        "Cerulean Blue",
        "Classic Rose",
        "Roman Coffee",
        "Spindle",
        "Geraldine",
        "Haze",
        "Portica",
        "Shamrock",
        "Cornflower",
        "Turquoise Sunshine",
        "Cranberry",
        "Dodger",
        "Coral Crayola",
        "Pastel Vibez",
        "Forest Love",
        "Rave Sunset",
        "Kirby"
    ];

    function random(
        uint256 min,
        uint256 max,
        uint256 seed
    ) public pure returns (uint256) {
        uint256 randomnumber = uint256(keccak256(abi.encodePacked(seed))) %
            (max - min);
        return randomnumber + min;
    }

    function uint2str(uint256 _i)
        internal
        pure
        returns (string memory _uintAsString)
    {
        if (_i == 0) {
            return "0";
        }
        uint256 j = _i;
        uint256 len;
        while (j != 0) {
            len++;
            j /= 10;
        }
        bytes memory bstr = new bytes(len);
        uint256 k = len;
        while (_i != 0) {
            k = k - 1;
            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));
            bytes1 b1 = bytes1(temp);
            bstr[k] = b1;
            _i /= 10;
        }
        return string(bstr);
    }

    function makeColorBackground(uint256 seed)
        public
        view
        returns (string memory)
    {
        string[2] memory color = colorPalette[
            (random(0, colorPalette.length, seed * 5))
        ];
        string[4] memory background = colors[
            (random(0, colors.length, seed * 3))
        ];
        return
            string(
                abi.encodePacked(
                    "<defs>",
                    background[0],
                    uint2str((seed * 44) % 360),
                    background[1],
                    color[0],
                    background[2],
                    color[1],
                    background[3],
                    "</defs>"
                )
            );
    }

    function generateSVG(uint256 seed, uint256 timeUntilStarving)
        public
        view
        returns (string memory)
    {
        uint256 eyeState;
        uint256 mouthState;

        (eyeState, mouthState) = getState(seed, timeUntilStarving);

        return
            string(
                abi.encodePacked(
                    "<svg  xmlns='http://www.w3.org/2000/svg' version='1.1' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 781 692'>",
                    ears[random(0, ears.length, seed + 2)],
                    "<path d='M379 635.808C379 644.683 371.885 657.004 358.174 667.49C344.761 677.747 326.145 685.308 305.5 685.308C284.79 685.308 263.422 677.655 247.301 665.46C231.124 653.222 221 637.059 221 620.308C221 618.538 221.446 617.58 221.92 616.968C222.448 616.289 223.418 615.522 225.232 614.853C229.069 613.439 235.043 613.041 242.812 613.446C249.683 613.805 257.247 614.737 264.933 615.684C265.763 615.786 266.595 615.888 267.427 615.99C275.801 617.016 284.322 617.998 291.5 617.998C305.029 617.998 327.978 618.16 347.47 621.136C357.273 622.632 365.695 624.771 371.51 627.671C377.464 630.64 379 633.466 379 635.808Z' fill='url(#fill_pattern)' stroke='black' stroke-width='12'/>  <path d='M433 635.511C433 644.387 440.115 656.708 453.826 667.194C467.239 677.451 485.855 685.011 506.5 685.011C527.21 685.011 548.578 677.359 564.699 665.164C580.876 652.926 591 636.762 591 620.011C591 618.242 590.554 617.284 590.08 616.672C589.553 615.992 588.582 615.225 586.769 614.557C582.932 613.142 576.957 612.744 569.188 613.15C562.317 613.509 554.753 614.44 547.067 615.387C546.237 615.489 545.406 615.592 544.573 615.694C536.199 616.719 527.678 617.702 520.5 617.702C506.971 617.702 484.022 617.864 464.531 620.839C454.727 622.336 446.305 624.475 440.49 627.375C434.536 630.344 433 633.169 433 635.511Z' fill='url(#fill_pattern)' stroke='black' stroke-width='12'/> <path d='M772.045 441.322C775.584 473.406 767.375 500.381 749.971 523.076C732.425 545.956 705.233 564.855 670.331 579.86C600.453 609.901 501.629 623.5 394.5 623.5C287.208 623.5 192.698 612.593 125.265 583.938C91.6375 569.648 65.1257 551.103 47.0303 527.66C29.0915 504.419 19.0857 475.934 19.0005 440.95C28.1375 366.412 69.2049 282.753 134.561 217.69C199.955 152.589 289.255 106.5 394.5 106.5C499.564 106.5 590.245 156.682 656.705 224.018C723.284 291.475 764.77 375.357 772.045 441.322Z' fill='url(#fill_pattern)' stroke='black' stroke-width='15'/>",
                    makeColorBackground(seed),
                    eyes[eyeState],
                    noses[random(0, noses.length, (seed + seed))],
                    mouths[mouthState],
                    "</svg>"
                )
            );
    }

    function getState(uint256 seed, uint256 timeUntilStarving)
        public
        view
        returns (uint256 eyeState, uint256 mouthState)
    {
        // set eyes state
        eyeState = random(3, 4, seed * 3); // TODO this return asian or caucasian state randomly

        if (timeUntilStarving > 3 days) {
            mouthState = 5;
        } else if (timeUntilStarving > 2 days && timeUntilStarving < 3 days) {
            // if more then 24 hours, happy so we get default state

            eyeState = 1;
            // open mouth tongue
            mouthState = 5;

            // TODO the rest
        } else if (timeUntilStarving < 2 days && timeUntilStarving > 1.5 days) {
            // open mouth square
            mouthState = 4;
        } else if (timeUntilStarving < 1.5 days && timeUntilStarving > 1 days) {
            // happy full
            mouthState = 1;
        } else if (timeUntilStarving < 1 days && timeUntilStarving > 20 hours) {
            //happy thin
            mouthState = 2;
        } else if (
            timeUntilStarving < 20 hours && timeUntilStarving > 12 hours
        ) {
            // open mouth tongue circle
            mouthState = 0;
        } else if (timeUntilStarving < 12 hours && timeUntilStarving != 0) {
            // grumpy smile down
            mouthState = 3;
            eyeState = 0;
        } else if (timeUntilStarving == 0) {
            // dead
            mouthState = 0;
            eyeState = 2;
        }
    }

    function generateMetadata(uint256 seed, uint256 timeUntilStarving)
        public
        view
        returns (string memory)
    {
        uint256 eyeState;
        uint256 mouthState;

        (eyeState, mouthState) = getState(seed, timeUntilStarving);

        return
            string(
                abi.encodePacked(
                    '{ "trait_type": "Skin Type","value":"',
                    colorName[(random(0, colors.length, seed * 3))],
                    '"}, { "trait_type": "Color","value":"',
                    colorPaletteNanes[random(0, colorPalette.length, seed * 5)],
                    '"}, { "trait_type": "Eyes","value":"',
                    eyesName[eyeState],
                    '"}, { "trait_type": "Nose","value":"',
                    nosesName[random(0, noses.length, (seed + seed))],
                    '"}, { "trait_type": "Mouth","value":"',
                    mouthsName[mouthState],
                    '"}, { "trait_type": "Ears","value":"',
                    earsName[random(0, ears.length, seed + 2)],
                    '"}'
                )
            );
    }

    function render(uint256 _tokenId)
        public
        view
        virtual
        returns (string memory)
    {
        //TODO get pet data
        // (, , , , , , , , , , , bool isALive) = game.getPetInfo(token);
        uint256 petId = game.nftToId(cudlPets, _tokenId);
        uint256 timeBorn = game.timePetBorn(petId);
        uint256 seed = timeBorn + _tokenId;
        uint256 timeUntilStarving = game.timeUntilStarving(petId) >
            block.timestamp
            ? 0
            : game.timeUntilStarving(petId) - block.timestamp;

        // End adam added

        string memory image = generateSVG(seed, timeUntilStarving);
        string memory attributes = string(
            abi.encodePacked(
                '", "attributes":[',
                generateMetadata(seed, timeUntilStarving),
                "]}"
            )
        );
        return
            string(
                abi.encodePacked(
                    "data:application/json;utf8,",
                    (
                        (
                            abi.encodePacked(
                                '{"name":"HELLO","image": ',
                                '"',
                                "data:image/svg+xml;base64,",
                                encodeBase64(abi.encodePacked(image)),
                                attributes
                            )
                        )
                    )
                )
            );
    }
}

