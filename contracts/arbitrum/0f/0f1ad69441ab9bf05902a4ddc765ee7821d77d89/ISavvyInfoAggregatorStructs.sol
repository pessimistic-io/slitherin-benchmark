// SPDX-License-Identifier: GPL-3.0-or-later
pragma solidity ^0.8.17;

interface ISavvyInfoAggregatorStructs {
    struct FullSavvyPosition {
        address token;
        uint256 amount;
        uint256 valueUSD;
    }

    struct FullDebtInfo {
        address savvyPositionManager;
        int256 amount;
        int256 valueUSD;
    }

    struct FullPoolInfo {
        address savvyPositionManager;
        address poolAddress;
        address baseTokenAddress;
        uint256 userDepositedAmount;
        uint256 userDepositedValueUSD;
        uint256 poolDepositedAmount;
        uint256 poolDepositedValueUSD;
        uint256 maxPoolDepositedAmount;
        uint256 maxPoolDepositedValueUSD;
        uint256 maxWithdrawableShares;
        uint256 maxWithdrawableAmount;
    }

    struct SavvyPosition {
        address baseToken;
        uint256 amount;
    }

    struct SavvyWithdrawInfo {
        address savvyPositionManager;
        address yieldToken;
        uint256 amount;
        uint256 shares;
    }

    struct SupportTokenInfo {
        address baseToken;
        address yieldToken;
    }

    struct DebtInfo {
        address savvyPositionManager;
        int256 amount;
    }

    struct TokenPriceData {
        address tokenAddress;
        uint256 priceUSD;
    }

    /// @notice All the information required by the Dashboard page.
    struct DashboardPageInfo {
        // The balance and value for debt tokens in the account's
        // wallet (e.g. svUSD, svAVAX, etc).
        FullSavvyPosition[] debtTokens;
        // The balance and value of each token the account deposited
        // into Savvy (e.g. USDC, WAVAX, WETH.e, etc).
        FullSavvyPosition[] depositedTokens;
        // The balance and value of each token that a wallet can deposit into Savvy.
        // @dev This is different than `depositedTokens`. `depositedTokens` are
        // tokens already deposited into Savvy where as `availableDeposit` is
        // the balance of depositable tokens in an account's wallet.
        FullSavvyPosition[] availableDeposit;
        // The balance and value of the available credit for each debt token.
        FullSavvyPosition[] availableCredit;
        // The balance and value of the outstanding debt for an account.
        // @dev This is different than `debtTokens`. This is how
        // much an account owes SavvyPositionManager. The debt token
        // is an arbitrary ERC20 that has no bearing on outstanding debt.
        FullDebtInfo[] outstandingDebt;
    }

    /// @notice All the information required by the Pools page.
    struct PoolsPageInfo {
        // Info for all the Savvy pools.
        FullPoolInfo[] pools;
        // The balance and value for debt tokens in the account's
        // wallet (e.g. svUSD, svAVAX, etc).
        FullSavvyPosition[] debtTokens;
        // The balance and value of each token that a wallet can deposit into Savvy.
        // @dev This is different than `depositedTokens`. `depositedTokens` are
        // tokens already deposited into Savvy where as `availableDeposit` is
        // the balance of depositable tokens in an account's wallet.
        FullSavvyPosition[] availableDeposit;
        // The balance and value of the available credit for each debt token.
        FullSavvyPosition[] availableCredit;
        // The balance and value of the outstanding debt for an account.
        // @dev This is different than `debtTokens`. This is how
        // much an account owes SavvyPositionManager. The debt token
        // is an arbitrary ERC20 that has no bearing on outstanding debt.
        FullDebtInfo[] outstandingDebt;
    }

    /// @notice All the information required by the MySVY page.
    struct MySVYPageInfo {
        // Balance of SVY.
        uint256 svyBalance;
        // Balance of staked SVY.
        uint256 stakedSVYBalance;
        // Amount of claimable SVY.
        uint256 claimableSVY;
        // The per second earn rate of SVY.
        uint256 svyEarnRatePerSec;
        // Balance of veSVY.
        uint256 veSVYBalance;
        // Amount of claimable veSVY.
        uint256 claimableVeSVY;
        // The per second earn rate of veSVY.
        uint256 veSVYEarnRatePerSec;
        // The maximum earnable veSVY.
        uint256 maxVeSvyEarnable;
    }

    /// @notice Information for a single savvy swap.
    struct SwapInfo {
        // Address of the SavvySwap.
        address savvySwap;
        // Address of the deposit token.
        address depositToken;
        // Address of the token that is generated by the swap.
        address swapTargetToken;
        // The amount of tokens you can deposit into SavvySwap.
        uint256 availableDepositAmount;
        // The amount of DepositToken you've deposited into SavvySwap.
        uint256 depositedAmount;
        // The amount of SwapTargetToken that has been swapps and can be claimed.
        uint256 claimableAmount;
    }

    /// @notice All the information required by the MySVY page.
    struct SwapPageInfo {
        SwapInfo[] swapInfos;
    }
}

