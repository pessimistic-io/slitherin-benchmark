//SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./Utilities.sol";
import "./EnumerableSet.sol";
import "./IERC721.sol";

contract ExploitRecovery is Utilities {

    using EnumerableSet for EnumerableSet.UintSet;

    address public marketplaceAccount = address(0xDb6Ab450178bAbCf0e467c1F3B436050d907E233);

    mapping(address => EnumerableSet.UintSet) internal collectionToTokensToSendHome;
    mapping(address => mapping(uint256 => address)) internal collectionToTokenToOwner;

    uint256 public maxBatchSize = 20;

    constructor() Utilities() {

    }

    function setMaxBatchSize(uint256 _maxBatchSize) external onlyOwner {
        maxBatchSize = _maxBatchSize;
    }

    function addTokensToSendHome(address _collectionAddress, uint256[] calldata _tokenIds, address[] calldata _actualOwners) external onlyOwner {
        require(_tokenIds.length == _actualOwners.length, "ExploitRecovery: Bad lengths");

        for(uint256 i = 0; i < _tokenIds.length; i++) {
            collectionToTokensToSendHome[_collectionAddress].add(_tokenIds[i]);

            collectionToTokenToOwner[_collectionAddress][_tokenIds[i]] = _actualOwners[i];
        }
    }

    function sendBatchHome(address _collectionAddress) external {
        require(msg.sender == marketplaceAccount, "ExploitRecovery: Only marketplace account");

        uint256 _numberToSendHome = collectionToTokensToSendHome[_collectionAddress].length();

        require(_numberToSendHome > 0, "ExploitRecovery: No tokens to send home");

        uint256 batchSize = _numberToSendHome > maxBatchSize ? maxBatchSize : _numberToSendHome;

        uint256[] memory _idsCopy = collectionToTokensToSendHome[_collectionAddress].values();

        for(uint256 i = 0; i < batchSize; i++) {
            uint256 _tokenId = _idsCopy[i];
            address _to = collectionToTokenToOwner[_collectionAddress][_tokenId];
            require(_to != address(0), "ExploitRecovery: Bad TO address");
            IERC721(_collectionAddress).safeTransferFrom(msg.sender, _to, _tokenId);

            collectionToTokensToSendHome[_collectionAddress].remove(_tokenId);
        }
    }
}
