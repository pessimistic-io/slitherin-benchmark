// SPDX-License-Identifier: UNLICENSED
// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.6.6.
pragma solidity >=0.7.0 <0.9.0;
import "./IERC721.sol";

interface ICrossChainStablecoin is IERC721 {
    event AddedFrontEnd(uint256 promoter);
    event BorrowToken(uint256 vaultID, uint256 amount);
    event BoughtRiskyDebtVault(
        uint256 riskyVault,
        uint256 newVault,
        address riskyVaultBuyer,
        uint256 amountPaidtoBuy
    );
    event BurnedToken(uint256 amount);
    event CreateVault(uint256 vaultID, address creator);
    event DepositCollateral(uint256 vaultID, uint256 amount);
    event DestroyVault(uint256 vaultID);
    event LiquidateVault(
        uint256 vaultID,
        address owner,
        address buyer,
        uint256 debtRepaid,
        uint256 collateralLiquidated,
        uint256 closingFee
    );
    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );
    event PayBackToken(uint256 vaultID, uint256 amount, uint256 closingFee);
    event RemovedFrontEnd(uint256 promoter);
    event UpdatedAdmin(address newAdmin);
    event UpdatedClosingFee(uint256 newFee);
    event UpdatedDebtRatio(uint256 _debtRatio);
    event UpdatedEthPriceSource(address _ethPriceSourceAddress);
    event UpdatedFees(uint256 _adminFee, uint256 _refFee);
    event UpdatedFrontEnd(uint256 promoter, uint256 newFee);
    event UpdatedGainRatio(uint256 _gainRatio);
    event UpdatedInterestRate(uint256 interestRate);
    event UpdatedMaxDebt(uint256 newMaxDebt);
    event UpdatedMinCollateralRatio(uint256 newMinCollateralRatio);
    event UpdatedMinDebt(uint256 newMinDebt);
    event UpdatedOpeningFee(uint256 newFee);
    event UpdatedOracleName(string oracle);
    event UpdatedRef(address newRef);
    event UpdatedStabilityPool(address pool);
    event UpdatedTokenURI(string uri);
    event WithdrawCollateral(uint256 vaultID, uint256 amount);
    event WithdrawInterest(uint256 earned);

    function _minimumCollateralPercentage() external view returns (uint256);

    function accumulatedVaultDebt(uint256) external view returns (uint256);

    function addFrontEnd(uint256 _promoter) external;

    function adm() external view returns (address);

    function adminFee() external view returns (uint256);

    function approve(address to, uint256 tokenId) external;

    function balanceOf(address owner) external view returns (uint256);

    function borrowToken(
        uint256 vaultID,
        uint256 amount,
        uint256 _front
    ) external;

    function burn(uint256 amountToken) external;

    function buyRiskDebtVault(uint256 vaultID) external returns (uint256);

    function calculateFee(
        uint256 fee,
        uint256 amount,
        uint256 promoFee
    ) external view returns (uint256);

    function changeEthPriceSource(address ethPriceSourceAddress) external;

    function checkCollateralPercentage(uint256 vaultID)
        external
        view
        returns (uint256);

    function checkCost(uint256 vaultID) external view returns (uint256);

    function checkExtract(uint256 vaultID) external view returns (uint256);

    function checkLiquidation(uint256 vaultID) external view returns (bool);

    function checkRiskyVault(uint256 vaultID) external view returns (bool);

    function closingFee() external view returns (uint256);

    function collateral() external view returns (address);

    function createVault() external returns (uint256);

    function debtRatio() external view returns (uint256);

    function decimalDifferenceRaisedToTen() external view returns (uint256);

    function depositCollateral(uint256 vaultID, uint256 amount) external;

    function destroyVault(uint256 vaultID) external;

    function ethPriceSource() external view returns (address);

    function exists(uint256 vaultID) external view returns (bool);

    function gainRatio() external view returns (uint256);

    function getApproved(uint256 tokenId) external view returns (address);

    function getClosingFee() external view returns (uint256);

    function getDebtCeiling() external view returns (uint256);

    function getEthPriceSource() external view returns (uint256);

    function getPaid(address pay) external;

    function getPaid() external;

    function getTokenPriceSource() external view returns (uint256);

    function getTotalValueLocked() external view returns (uint256);

    function iR() external view returns (uint256);

    function isApprovedForAll(address owner, address operator)
        external
        view
        returns (bool);

    function isValidCollateral(uint256 _collateral, uint256 debt)
        external
        view
        returns (bool);

    function lastInterest(uint256) external view returns (uint256);

    function liquidateVault(uint256 vaultID, uint256 _front) external;

    function mai() external view returns (address);

    function maiDebt() external view returns (uint256);

    function maticDebt(address) external view returns (uint256);

    function maxDebt() external view returns (uint256);

    function minDebt() external view returns (uint256);

    function name() external view returns (string memory);

    function openingFee() external view returns (uint256);

    function owner() external view returns (address);

    function ownerOf(uint256 tokenId) external view returns (address);

    function payBackToken(
        uint256 vaultID,
        uint256 amount,
        uint256 _front
    ) external;

    function paybackTokenAll(
        uint256 vaultID,
        uint256 deadline,
        uint256 _front
    ) external;

    function priceSourceDecimals() external view returns (uint256);

    function promoter(uint256) external view returns (uint256);

    function ref() external view returns (address);

    function refFee() external view returns (uint256);

    function removeFrontEnd(uint256 _promoter) external;

    function renounceOwnership() external;

    function router() external view returns (address);

    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes memory data
    ) external;

    function setAdmin(address _adm) external;

    function setApprovalForAll(address operator, bool approved) external;

    function setClosingFee(uint256 _closingFee) external;

    function setDebtRatio(uint256 _debtRatio) external;

    function setFees(uint256 _admin, uint256 _ref) external;

    function setGainRatio(uint256 _gainRatio) external;

    function setInterestRate(uint256 _iR) external;

    function setMaxDebt(uint256 _maxDebt) external;

    function setMinCollateralRatio(uint256 minimumCollateralPercentage)
        external;

    function setMinDebt(uint256 _minDebt) external;

    function setOpeningFee(uint256 _openingFee) external;

    function setRef(address _ref) external;

    function setRouter(address _router) external;

    function setStabilityPool(address _pool) external;

    function setTokenURI(string memory _uri) external;

    function stabilityPool() external view returns (address);

    function supportsInterface(bytes4 interfaceId) external view returns (bool);

    function symbol() external view returns (string memory);

    function tokenByIndex(uint256 index) external view returns (uint256);

    function tokenOfOwnerByIndex(address owner, uint256 index)
        external
        view
        returns (uint256);

    function tokenPeg() external view returns (uint256);

    function tokenURI(uint256 tokenId) external view returns (string memory);

    function totalBorrowed() external view returns (uint256);

    function totalSupply() external view returns (uint256);

    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    function transferOwnership(address newOwner) external;

    function updateFrontEnd(uint256 _promoter, uint256 cashback) external;

    function updateOracleName(string memory _oracle) external;

    function updateVaultDebt(uint256 vaultID) external returns (uint256);

    function uri() external view returns (string memory);

    function vaultCollateral(uint256) external view returns (uint256);

    function vaultCount() external view returns (uint256);

    function vaultDebt(uint256 vaultID) external view returns (uint256);

    function version() external view returns (uint8);

    function withdrawCollateral(uint256 vaultID, uint256 amount) external;

    function withdrawInterest() external;
}

