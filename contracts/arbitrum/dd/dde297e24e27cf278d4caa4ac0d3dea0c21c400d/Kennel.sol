// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./Address.sol";
import "./Ownable.sol";
import "./PaymentSplitter.sol";
import "./ReentrancyGuard.sol";
import "./ECDSA.sol";
import "./LitterKittens.sol";

//
//
//                                                                                                          @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//                                                                                                      @@@@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@@
//                                                                                                 @@@@@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#%#%%%%%%%%%%/////%%@@(
//                                  Made by Array                                             ,@@@@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%&%%%%////#######%%&@@
//                                  tw: @ArrayTheDev                                  %&&&&&&&&&%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%&(((((((((################%%%&
//         @@@@                                                                  @@@@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%////(#%########(((#%%###########%%@@@
//    @@@@@((((@@@@@                                                        @@@@@%%%%&%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%////(######%%(###########%%###########%%#@@
//    @@///,,,,(((((@@@@                                                @@@@#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%/////#%###########%%%#####(((###%%############%%@@
//    @@///////,,,,,((((@@@@@                                      @@@@@%&&%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%////((((###%%(###########%############%%############%#@@
//    @@////////////,,,,(((((@@@@                              @@@@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%/////%%((#########%%%###########%%############%%###########%%@@@
//    @@///######///////,,,,,((((@@@@@                    @@@@@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%////####(#(%%############%%###########%%############%%###########%%#@@
//    @@///##((//////////////,,,,(((((@@@@            @@@@%%%%%%%%%%%%####%%%%%%%%%%%%%%%%%%%%###%%%%%%%%%%%/////%%##((((#####%%###########(%%###########%%############%%############%%@@
//    @@///##((/////#######//////,,,,,####@@@    @@@@@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%&////#######%%(###########%%###########%%(###########%%######(((##%%%###########%%@@
//    @@///######///##((###///////////,,##@@@  @@%%%%%%%%%%%%%%%%##%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%/////%%#(#########%%##(#########%%#(#########%%%#(#########%%#(#########(%%((#########%%@@@
//    @@////////////#######//######///,,##@@@  @@@@@@@@@@@@@@@@@&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&##((###########(###########%##########################%#############%############%%############%%@@
//    @@@@@/////////##((###////##////,,##@@@         @@(((/(//(((((((((((((((((((((((((((((((#@@%%###########%%%###########%%############%%###########%%############%%###########%%%###########%%@@(
//         @@@@////////////////##////,,##@@@         @@(((((((((((((((((((((((((((((((((((((((((@@%%#####(((###(%############%%###########(%%############%############%%############%%###########%%&@@
//             @@@@@///////////##/////,,##@@@         @@***************************************((((@@%%%###########%%(###########%%###########%%(#######(#(#%%###########%%%####(((####%%#########%%&@@
//                  @@@@//////////////,,##@@@         @@((***************************************((((@@@%%###########%%############%%###########%%%####(((####%%###########(%%###########%%#####@@@@(
//                  @@((@@@@@/////////,,##@@@         @@**(((((************************************((((/@@%%###########%%%###########%%(#########(####(#########%%############%%###########@@@@@
//                  @@**@@&  @@@@/////,,##@@@         @@*******((((**********************************(((((@@%%############%%###########%%%#####(##(##%%############%%###########%%#####@@@@///@@
//                  @@**@@&      @@@@@@@@@            @@***********((((/********************************((((@@#%%######((###%%############%%#(#((######%%############%############@@@@@///////@@
//                  @@**@@&                           @@****************((((******************************((((@@@%%###########%%###########(%%############%%###########%%#(###@@@@////////////@@
//                  @@**@@&                           @@((******************/((((***************/***********//(((@@%%##(##########%#################################(####@@@@@/////////////###@@
//                    @@                              @@*******((((**************,,##&@@%%%%%%%%%@@@@************((((@@%%%###########%%(###########%%###########@@@@@/////////@@@@#####///////@@
//                                                    @@***********((((/*******,,##@@%%&&&&&&&&&&&&&&@@@***********((((@@@%%#######((##%%%############%#####@@@@/////////@@@@@##**////////////@@
//                                                    @@****************((((***,,##@@&&&&&&&&&&&&&&&&&&%@@***********(((((@@%%############%%###########@@@@@/////////@@@@&%%@@##**////////////@@
//                                                    @@((******************(((,,##@@&&&&&&&&&&&&&&&&%%%&&@@***********(((((@@%%###########(%%####(@@@@/////////@@@@@&&&&&&%@@##**/////////###@@
//                                                    @@**(((((****************,,##@@&&&&&&&&&&&&&&&&&&&&&@@**************((((@@&%%###########@@@@@/////////@@@@&%%%%%&&&&&%@@##**/////####///@@
//                                                    @@*******((((************,,##@@&&&&&&&&&&&&&&&&&&&&&&&@@/(/***********((((%@@%%%%%%#@@@@/////////@@@@@&&&&&&&&&&&&&%%%@@##**#####///////@@
//                                                    @@***********(((((*******,,##@@&&&&&&&&&&&&&&&&&&&&&&&@@,**((((*********(((((@@@@@@@/////////@@@@&&&&&&&&&&&&&&%%%%&&%@@##**////////////@@
//                                                    @@****************((((***,,##@@&&&&&&&&%&&&&&&&&&&&&&&@@,******(/(((*******((((,,////////////@@%&&&&&&&&&&&&&&&%%%%&&%@@##**////////////@@
//                                                    @@@@******************(((,,##@@&&&&&&&&&&&&&&&&&&&&&&&@@,***********((((*****((,,///////#####@@%&&&&&&&&&&&&&&&&&&&&&%@@##**/////////###@@
//                                                        #####((((************,,##@@&&&&&&&&&&&&&&&&&&&&&&&@@****************/////((,,(((####/////@@%&&&&&&&&&&&%&&&&&&&&&&@@##**(((((####///@@
//                                                                 @@@@@*******,,##@@&%%&&&&&&&&&&&&&&&&&&&&@@,**((((****************,,////////////@@%&&&&&&&&&&&&&&&@@@@#####****////////////@@
//                                                                      @@@@,**,,##@@&&&&&&&&&&&&&&&&&&&&&&&@@,******(((((***********,,////////////@@%&&&&&&%%&&@@@@@####*****////////////////@@
//                                                                          @@@@@@@@@@@@&&&&&&&&&&&&&&&&&%&&@@,***********((((*******,,///////#####@@%&&&&&&@@@@#####****//////////////////@@@@@
//                                                                                      @@@@%%&&&&&&&&&&&&&&@@,***************(((((**,,///####/////@@%&@@@@@####*****//////////////////@@@@
//                                                                                          @@@@@&&&&&&&&&&&@@/(/******************((,,###/////////@@@@#####****//////////////////@@@@@
//                                                                                               @@@@&&&&&&&@@,**((((****************,,////////////@@##*****//////////////////@@@@
//                                                                                                   @@@@@&&@@,******(((((***********,,////////////****//////////////////@@@@@
//                                                                                                        @@@@,***********((((*******,,///////#####//////////////////@@@@
//                                                                                                          @@****************(///(**,,///####//////////////////@@@@@
//                                                                                                               @@@@****************,,////////////////@@@@@
//                                                                                                                   @@@@@***********,,////////////@@@@
//                                                                                                                        @@@@*******,,///////@@@@@
//                                                                                                                            @@@@@**,,///@@@@
//                                                                                                                                 @@@@@@@
//

contract Kennel is Ownable, PaymentSplitter, ReentrancyGuard {
    using ECDSA for bytes32;
    using Strings for uint256;
    using Address for address payable;

    struct saleParams {
        string name;
        uint256 price;
        uint64 startTime;
        uint64 endTime;
        uint64 supply;
        uint32 claimable;
        bool requireSignature;
    }

    address private signer;
    address[] private _team = [
        0x4B0B91C09848Fd3851d639a8557f6209c98732E9,
        0x3222eA47d1Efd5477a1234c0db15598130D05523,
        0x21a06Eb8b704400ea42df3734BD1E6be876a2bdF,
        0xc18d9F0C2cdFa4732333e178A4892f451F0A5E18,
        0xB3270E06009F0C446C3B9a84fbcB729946D49828,
        0x2c357529a68aefCdE79445D63ae2d6dDF8D09D8B
    ];
    uint256[] private _teamShares = [665, 150, 100, 50, 20, 15];

    LitterKittens public immutable kittens;
    mapping(uint32 => saleParams) public sales;
    mapping(string => mapping(address => uint256)) public mintsPerWallet;
    mapping(string => uint256) public mintsPerSale;

    event Minted(address indexed mintedBy, uint256 _quantity, string saleName);
    event Airdroped(address indexed givenTo, uint256 _quantity);
    event SaleConfigured(uint32 id, string name);

    constructor(address _litterKittenAddress, address _signer) PaymentSplitter(_team, _teamShares) {
        kittens = LitterKittens(_litterKittenAddress);
        signer = _signer;
    }

    // MODIFIERS
    modifier callerIsUser() {
        require(tx.origin == msg.sender, "Kennel: The caller is another contract");
        _;
    }

    // ADMIN
    function withdrawAll() external onlyOwner nonReentrant {
        for (uint32 i = 0; i < _team.length; i++) {
            address payable wallet = payable(_team[i]);
            release(wallet);
        }
    }

    function setSignerAddress(address _newAddress) external onlyOwner {
        require(_newAddress != address(0), "Kennel: Invalid address.");
        signer = _newAddress;
    }

    function configureSale(
        uint32 _id,
        string memory _name,
        uint256 _price,
        uint64 _startTime,
        uint64 _endTime,
        uint64 _supply,
        uint32 _claimable,
        bool _requireSignature
    ) external onlyOwner {
        require(_startTime > 0 && _endTime > 0 && _endTime > _startTime, "Kennel: Time range is invalid.");
        sales[_id] = saleParams(_name, _price, _startTime, _endTime, _supply, _claimable, _requireSignature);
        emit SaleConfigured(_id, _name);
    }

    function airdrop(address _to, uint256 _quantity) external onlyOwner {
        kittens.mint(_to, _quantity);
        emit Airdroped(_to, _quantity);
    }

    // MINT
    function adopt(
        uint32 _saleId,
        uint256 _quantity,
        uint256 _alloc,
        bytes calldata _signature
    ) external payable callerIsUser {
        saleParams memory sale = sales[_saleId];
        require(sale.startTime > 0 && sale.endTime > 0, "Kennel: Sale doesn't exists");

        uint256 alloc = sale.requireSignature ? _alloc : uint256(sale.claimable);

        if (sale.requireSignature) {
            bytes32 _messageHash = hashMessage(abi.encode(sale.name, address(this), _msgSender(), _alloc));
            require(verifyAddressSigner(_messageHash, _signature), "Kennel: Invalid signature.");
        }
        require(_quantity > 0, "Kennel: Wrong amount requested.");
        require(block.timestamp > sale.startTime && block.timestamp < sale.endTime, "Kennel: Sale is not active.");
        require(mintsPerSale[sale.name] + _quantity <= sale.supply, "Kennel: Not enough supply.");

        require(msg.value >= _quantity * uint256(sale.price), "Kennel: Insufficient amount.");
        require(mintsPerWallet[sale.name][_msgSender()] + _quantity <= alloc, "Kennel: Allocation exceeded.");

        unchecked {
            mintsPerWallet[sale.name][_msgSender()] += _quantity;
            mintsPerSale[sale.name] += _quantity;
        }

        kittens.mint(_msgSender(), _quantity);
        emit Minted(_msgSender(), _quantity, sale.name);
    }

    // PRIVATE
    function verifyAddressSigner(bytes32 _messageHash, bytes memory _signature) private view returns (bool) {
        return signer == _messageHash.toEthSignedMessageHash().recover(_signature);
    }

    function hashMessage(bytes memory _msg) private pure returns (bytes32) {
        return keccak256(_msg);
    }
}

