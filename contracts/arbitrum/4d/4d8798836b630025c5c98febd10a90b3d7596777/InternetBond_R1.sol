// SPDX-License-Identifier: GPL-3.0-only
pragma solidity ^0.8.6;

import "./ERC20_IERC20.sol";
import "./IInternetBondRatioFeed.sol";
import "./SimpleToken_R1.sol";
import "./Utils.sol";

contract InternetBond_R1 is SimpleToken_R1, IERC20InternetBond {

    IInternetBondRatioFeed public ratioFeed;
    bool internal _rebasing;

    function ratio() public view override returns (uint256) {
        return ratioFeed.getRatioFor(_originAddress);
    }

    function isRebasing() public view override returns (bool) {
        return _rebasing;
    }

    function totalSupply() public view override returns (uint256) {
        return _sharesToBonds(super.totalSupply());
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _sharesToBonds(super.balanceOf(account));
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        uint256 shares = _bondsToShares(amount);
        _transfer(_msgSender(), recipient, shares, false);
        emit Transfer(_msgSender(), recipient, _sharesToBonds(shares));
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _sharesToBonds(super.allowance(owner, spender));
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        uint256 shares = _bondsToShares(amount);
        _approve(_msgSender(), spender, shares, false);
        emit Approval(_msgSender(), spender, allowance(_msgSender(), spender));
        return true;
    }

    function increaseAllowance(address spender, uint256 amount) public override returns (bool) {
        uint256 shares = _bondsToShares(amount);
        _increaseAllowance(_msgSender(), spender, shares, false);
        emit Approval(_msgSender(), spender, allowance(_msgSender(), spender));
        return true;
    }

    function decreaseAllowance(address spender, uint256 amount) public override returns (bool) {
        uint256 shares = _bondsToShares(amount);
        _decreaseAllowance(_msgSender(), spender, shares, false);
        emit Approval(_msgSender(), spender, allowance(_msgSender(), spender));
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        uint256 shares = _bondsToShares(amount);
        _transfer(sender, recipient, shares, false);
        emit Transfer(sender, recipient, _sharesToBonds(shares));
        _decreaseAllowance(sender, _msgSender(), shares, false);
        emit Approval(sender, _msgSender(), allowance(sender, _msgSender()));
        return true;
    }

    // NB: mint accepts amount in shares
    function mint(address account, uint256 shares) public onlyOwner override {
        require(account != address(0));
        _totalSupply += shares;
        _balances[account] += shares;
        emit Transfer(address(0), account, _sharesToBonds(shares));
    }

    // NB: burn accepts amount in shares
    function burn(address account, uint256 shares) public onlyOwner override {
        require(account != address(0));
        _balances[account] -= shares;
        _totalSupply -= shares;
        emit Transfer(account, address(0), _sharesToBonds(shares));
    }

    function _sharesToBonds(uint256 amount) internal view returns (uint256) {
        if (_rebasing) {
            uint256 currentRatio = ratio();
            require(currentRatio > 0, "ratio not available");
            return Utils.multiplyAndDivideCeil(amount, 10 ** decimals(), currentRatio);
        } else {
            return amount;
        }
    }

    function _bondsToShares(uint256 amount) internal view returns (uint256) {
        if (_rebasing) {
            uint256 currentRatio = ratio();
            require(currentRatio > 0, "ratio not available");
            return Utils.multiplyAndDivideFloor(amount, currentRatio, 10 ** decimals());
        } else {
            return amount;
        }
    }

    function initAndObtainOwnership(bytes32 symbol, bytes32 name, uint256 originChain, address originAddress, address ratioFeedAddress, bool rebasing) external emptyOwner {
        super.initAndObtainOwnership(symbol, name, originChain, originAddress);
        require(ratioFeedAddress != address(0x0), "no ratio feed");
        ratioFeed = IInternetBondRatioFeed(ratioFeedAddress);
        _rebasing = rebasing;
    }
}

contract InternetBondFactory_R1 {
    address private _template;
    constructor() {
        _template = InternetBondFactoryUtils_R1.deployInternetBondTemplate(this);
    }

    function getImplementation() public view returns (address) {
        return _template;
    }
}

library InternetBondFactoryUtils_R1 {

    bytes32 constant internal INTERNET_BOND_TEMPLATE_SALT = keccak256("InternetBondTemplateV2");

    bytes constant internal INTERNET_BOND_TEMPLATE_BYTECODE = hex"608060405234801561001057600080fd5b50611216806100206000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c806371ca337d116100b857806395d89b411161007c57806395d89b411461029f5780639dc29fac146102a7578063a457c2d7146102ba578063a9059cbb146102cd578063dd62ed3e146102e0578063df1f29ee146102f357600080fd5b806371ca337d14610233578063898855ed1461023b5780638da5cb5b1461024e5780638e29ebb51461027957806394bfed881461028c57600080fd5b8063265535671161010a57806326553567146101c6578063313ce567146101d957806339509351146101e857806340c10f19146101fb5780635dfba1151461020e57806370a082311461022057600080fd5b806306fdde0314610147578063095ea7b31461016557806318160ddd146101885780631ad8fde61461019e57806323b872dd146101b3575b600080fd5b61014f610316565b60405161015c9190610f7e565b60405180910390f35b610178610173366004610e2e565b610328565b604051901515815260200161015c565b610190610384565b60405190815260200161015c565b6101b16101ac366004610e58565b610397565b005b6101786101c1366004610df2565b6103fb565b6101b16101d4366004610eb0565b6104a0565b6040516012815260200161015c565b6101786101f6366004610e2e565b61053e565b6101b1610209366004610e2e565b610559565b600854600160a01b900460ff16610178565b61019061022e366004610da4565b610600565b610190610622565b6101b1610249366004610e58565b6106a6565b600254610261906001600160a01b031681565b6040516001600160a01b03909116815260200161015c565b600854610261906001600160a01b031681565b6101b161029a366004610e71565b61070a565b61014f61075b565b6101b16102b5366004610e2e565b610768565b6101786102c8366004610e2e565b6107fd565b6101786102db366004610e2e565b610818565b6101906102ee366004610dbf565b610856565b600654600754604080519283526001600160a01b0390911660208301520161015c565b606061032360015461088e565b905090565b60008061033483610964565b905061034333858360006109ea565b6001600160a01b038416336000805160206111c18339815191526103678288610856565b60405190815260200160405180910390a360019150505b92915050565b600061032361039260055490565b610a80565b6002546001600160a01b031633146103ae57600080fd5b7fd7ad744cc76ebad190995130eec8ba506b3605612d23b5b9cef8e27f14d138b46103d761075b565b6103e08361088e565b6040516103ee929190610f91565b60405180910390a1600055565b60008061040783610964565b90506104168585836000610afd565b836001600160a01b0316856001600160a01b03166000805160206111a183398151915261044284610a80565b60405190815260200160405180910390a36104608533836000610bb6565b336001600160a01b0386166000805160206111c18339815191526104848884610856565b60405190815260200160405180910390a3506001949350505050565b6002546001600160a01b0316156104b657600080fd5b6104c28686868661070a565b6001600160a01b03821661050d5760405162461bcd60e51b815260206004820152600d60248201526c1b9bc81c985d1a5bc819995959609a1b60448201526064015b60405180910390fd5b60088054911515600160a01b026001600160a81b03199092166001600160a01b039093169290921717905550505050565b60008061054a83610964565b90506103433385836000610c63565b6002546001600160a01b0316331461057057600080fd5b6001600160a01b03821661058357600080fd5b80600560008282546105959190610fbf565b90915550506001600160a01b038216600090815260036020526040812080548392906105c2908490610fbf565b90915550506001600160a01b03821660006000805160206111a18339815191526105eb84610a80565b60405190815260200160405180910390a35050565b6001600160a01b03811660009081526003602052604081205461037e90610a80565b60085460075460405163a1f1d48d60e01b81526001600160a01b039182166004820152600092919091169063a1f1d48d9060240160206040518083038186803b15801561066e57600080fd5b505afa158015610682573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103239190610f18565b6002546001600160a01b031633146106bd57600080fd5b7f6c20b91d1723b78732eba64ff11ebd7966a6e4af568a00fa4f6b72c20f58b02a6106e6610316565b6106ef8361088e565b6040516106fd929190610f91565b60405180910390a1600155565b6002546001600160a01b03161561072057600080fd5b60028054336001600160a01b031991821617909155600094909455600192909255600655600780549092166001600160a01b03909116179055565b606061032360005461088e565b6002546001600160a01b0316331461077f57600080fd5b6001600160a01b03821661079257600080fd5b6001600160a01b038216600090815260036020526040812080548392906107ba90849061111d565b9250508190555080600560008282546107d3919061111d565b90915550600090506001600160a01b0383166000805160206111a18339815191526105eb84610a80565b60008061080983610964565b90506103433385836000610bb6565b60008061082483610964565b90506108333385836000610afd565b6001600160a01b038416336000805160206111a183398151915261036784610a80565b6001600160a01b03808316600090815260046020908152604080832093851683529290529081205461088790610a80565b9392505050565b6060816108a957505060408051600081526020810190915290565b600060105b60ff81161561090057836108c28284610fd7565b60ff16602081106108d5576108d5611174565b1a60f81b6001600160f81b031916156108f5576108f28183610fd7565b91505b60011c607f166108ae565b50600061090e826001610fd7565b60ff1667ffffffffffffffff8111156109295761092961118a565b6040519080825280601f01601f191660200182016040528015610953576020820181803683370190505b506020810194909452509192915050565b600854600090600160a01b900460ff16156109e1576000610983610622565b9050600081116109cb5760405162461bcd60e51b8152602060048201526013602482015272726174696f206e6f7420617661696c61626c6560681b6044820152606401610504565b61088783826109dc6012600a611053565b610cc0565b5090565b919050565b6001600160a01b0384166109fd57600080fd5b6001600160a01b038316610a1057600080fd5b6001600160a01b0380851660009081526004602090815260408083209387168352929052208290558015610a7a57826001600160a01b0316846001600160a01b03166000805160206111c183398151915284604051610a7191815260200190565b60405180910390a35b50505050565b600854600090600160a01b900460ff16156109e1576000610a9f610622565b905060008111610ae75760405162461bcd60e51b8152602060048201526013602482015272726174696f206e6f7420617661696c61626c6560681b6044820152606401610504565b61088783610af76012600a611053565b83610d05565b6001600160a01b038416610b1057600080fd5b6001600160a01b038316610b2357600080fd5b6001600160a01b03841660009081526003602052604081208054849290610b4b90849061111d565b90915550506001600160a01b03831660009081526003602052604081208054849290610b78908490610fbf565b90915550508015610a7a57826001600160a01b0316846001600160a01b03166000805160206111a183398151915284604051610a7191815260200190565b6001600160a01b038416610bc957600080fd5b6001600160a01b038316610bdc57600080fd5b6001600160a01b03808516600090815260046020908152604080832093871683529290529081208054849290610c1390849061111d565b90915550508015610a7a576001600160a01b038481166000818152600460209081526040808320948816808452948252918290205491519182526000805160206111c18339815191529101610a71565b6001600160a01b038416610c7657600080fd5b6001600160a01b038316610c8957600080fd5b6001600160a01b03808516600090815260046020908152604080832093871683529290529081208054849290610c13908490610fbf565b6000610cfd610cd8610cd28487610ffc565b85610d42565b8385610ce48289611134565b610cee91906110fe565b610cf89190610ffc565b610d75565b949350505050565b6000610cfd610d17610cd28487610ffc565b83610d2360018261111d565b86610d2e878a611134565b610d3891906110fe565b610cee9190610fbf565b600082610d515750600061037e565b82820282848281610d6457610d6461115e565b04146108875760001991505061037e565b6000828201838110156108875760001991505061037e565b80356001600160a01b03811681146109e557600080fd5b600060208284031215610db657600080fd5b61088782610d8d565b60008060408385031215610dd257600080fd5b610ddb83610d8d565b9150610de960208401610d8d565b90509250929050565b600080600060608486031215610e0757600080fd5b610e1084610d8d565b9250610e1e60208501610d8d565b9150604084013590509250925092565b60008060408385031215610e4157600080fd5b610e4a83610d8d565b946020939093013593505050565b600060208284031215610e6a57600080fd5b5035919050565b60008060008060808587031215610e8757600080fd5b843593506020850135925060408501359150610ea560608601610d8d565b905092959194509250565b60008060008060008060c08789031215610ec957600080fd5b863595506020870135945060408701359350610ee760608801610d8d565b9250610ef560808801610d8d565b915060a08701358015158114610f0a57600080fd5b809150509295509295509295565b600060208284031215610f2a57600080fd5b5051919050565b6000815180845260005b81811015610f5757602081850181015186830182015201610f3b565b81811115610f69576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006108876020830184610f31565b604081526000610fa46040830185610f31565b8281036020840152610fb68185610f31565b95945050505050565b60008219821115610fd257610fd2611148565b500190565b600060ff821660ff84168060ff03821115610ff457610ff4611148565b019392505050565b60008261100b5761100b61115e565b500490565b600181815b8085111561104b57816000190482111561103157611031611148565b8085161561103e57918102915b93841c9390800290611015565b509250929050565b600061088760ff84168360008261106c5750600161037e565b816110795750600061037e565b816001811461108f5760028114611099576110b5565b600191505061037e565b60ff8411156110aa576110aa611148565b50506001821b61037e565b5060208310610133831016604e8410600b84101617156110d8575081810a61037e565b6110e28383611010565b80600019048211156110f6576110f6611148565b029392505050565b600081600019048311821515161561111857611118611148565b500290565b60008282101561112f5761112f611148565b500390565b6000826111435761114361115e565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925a26469706673582212209af689c9c4267a97a7ee1f842a5dd9157f0e3207d11b84553c2544e190a08fa264736f6c63430008060033";

    bytes32 constant internal INTERNET_BOND_TEMPLATE_HASH = keccak256(INTERNET_BOND_TEMPLATE_BYTECODE);

    function deployInternetBondTemplate(InternetBondFactory_R1 templateFactory) internal returns (address) {
        /* we can use any deterministic salt here, since we don't care about it */
        bytes32 salt = INTERNET_BOND_TEMPLATE_SALT;
        /* concat bytecode with constructor */
        bytes memory bytecode = INTERNET_BOND_TEMPLATE_BYTECODE;
        /* deploy contract and store result in result variable */
        address result;
        assembly {
            result := create2(0, add(bytecode, 0x20), mload(bytecode), salt)
        }
        require(result != address(0x00), "deploy failed");
        /* check that generated contract address is correct */
        require(result == internetBondTemplateAddress(templateFactory), "address mismatched");
        return result;
    }

    function internetBondTemplateAddress(InternetBondFactory_R1 templateFactory) internal pure returns (address) {
        bytes32 hash = keccak256(abi.encodePacked(uint8(0xff), address(templateFactory), INTERNET_BOND_TEMPLATE_SALT, INTERNET_BOND_TEMPLATE_HASH));
        return address(bytes20(hash << 96));
    }
}

