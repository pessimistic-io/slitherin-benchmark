pragma solidity >=0.7.0 <0.9.0;
// SPDX-License-Identifier: MIT

/**
 * Generated by : https://www.cues.sg
 * Cues.sg : We make technology accessible.
 * Contract Type : Staking
*/

interface ERC20{
	function balanceOf(address account) external view returns (uint256);
	function transfer(address recipient, uint256 amount) external returns (bool);
	function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
}

contract Staking {

	address owner;
	struct record { uint256 stakeTime; uint256 stakeAmt; uint256 lastUpdateTime; uint256 accumulatedInterestToUpdateTime; uint256 amtWithdrawn; }
	mapping(address => record) public informationAboutStakeScheme;
	mapping(uint256 => address) public addressStore;
	uint256 public numberOfAddressesCurrentlyStaked = uint256(0);
	uint256 public minStakeAmt = uint256(5000000000000000000000);
	uint256 public maxStakeAmt = uint256(50000000000000000000000);
	uint256 public principalWithdrawalTax = uint256(0);
	uint256 public dailyInterestRate = uint256(2500);
	uint256 public dailyInterestRate_1 = uint256(5000);
	uint256 public dailyInterestRate_2 = uint256(2500);
	uint256 public minStakePeriod = (uint256(100) * uint256(864));
	uint256 public totalWithdrawals = uint256(0);
	event Staked (address indexed account);
	event Unstaked (address indexed account);

	constructor() {
		owner = msg.sender;
	}

	//This function allows the owner to specify an address that will take over ownership rights instead. Please double check the address provided as once the function is executed, only the new owner will be able to change the address back.
	function changeOwner(address _newOwner) public onlyOwner {
		owner = _newOwner;
	}

	modifier onlyOwner() {
		require(msg.sender == owner);
		_;
	}

	function minUIntPair(uint _i, uint _j) internal pure returns (uint){
		if (_i < _j){
			return _i;
		}else{
			return _j;
		}
	}

/**
 * Function changeValueOf_minStakeAmt
 * Notes for _minStakeAmt : 1 Coin YachtingVerse is represented by 10^18.
 * The function takes in 1 variable, (zero or a positive integer) _minStakeAmt. It can only be called by functions outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * updates minStakeAmt as _minStakeAmt
*/
	function changeValueOf_minStakeAmt(uint256 _minStakeAmt) external onlyOwner {
		minStakeAmt  = _minStakeAmt;
	}

/**
 * Function changeValueOf_maxStakeAmt
 * Notes for _maxStakeAmt : 1 Coin YachtingVerse is represented by 10^18.
 * The function takes in 1 variable, (zero or a positive integer) _maxStakeAmt. It can only be called by functions outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * updates maxStakeAmt as _maxStakeAmt
*/
	function changeValueOf_maxStakeAmt(uint256 _maxStakeAmt) external onlyOwner {
		maxStakeAmt  = _maxStakeAmt;
	}

/**
 * Function changeValueOf_principalWithdrawalTax
 * Notes for _principalWithdrawalTax : 10000 is one percent
 * The function takes in 1 variable, (zero or a positive integer) _principalWithdrawalTax. It can only be called by functions outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * checks that 0 is strictly less than _principalWithdrawalTax
 * checks that 1000000 is strictly greater than _principalWithdrawalTax
 * updates principalWithdrawalTax as _principalWithdrawalTax
*/
	function changeValueOf_principalWithdrawalTax(uint256 _principalWithdrawalTax) external onlyOwner {
		require((uint256(0) < _principalWithdrawalTax), "Tax rate needs to be larger than 0%");
		require((uint256(1000000) > _principalWithdrawalTax), "Tax rate needs to be smaller than 100%");
		principalWithdrawalTax  = _principalWithdrawalTax;
	}

/**
 * Function changeValueOf_minStakePeriod
 * Notes for _minStakePeriod : 1 day is represented by 86400 (seconds)
 * The function takes in 1 variable, (zero or a positive integer) _minStakePeriod. It can only be called by functions outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * updates minStakePeriod as _minStakePeriod
*/
	function changeValueOf_minStakePeriod(uint256 _minStakePeriod) external onlyOwner {
		minStakePeriod  = _minStakePeriod;
	}

/**
 * Function stake
 * Daily Interest Rate : Variable dailyInterestRate
 * This interest rate is modified under certain circumstances, as articulated in the consolidatedInterestRate function
 * Minimum Stake Period : Variable minStakePeriod
 * Address Map : informationAboutStakeScheme
 * The function takes in 1 variable, (zero or a positive integer) _stakeAmt. It can be called by functions both inside and outside of this contract. It does the following :
 * checks that _stakeAmt is strictly greater than 0
 * creates an internal variable thisRecord with initial value informationAboutStakeScheme with element the address that called this function
 * checks that _stakeAmt is greater than or equals to minStakeAmt
 * checks that ((_stakeAmt) + (thisRecord with element stakeAmt)) is less than or equals to maxStakeAmt
 * checks that (thisRecord with element stakeAmt) is equals to 0
 * updates informationAboutStakeScheme (Element the address that called this function) as Struct comprising current time, _stakeAmt, current time, 0, 0
 * updates addressStore (Element numberOfAddressesCurrentlyStaked) as the address that called this function
 * updates numberOfAddressesCurrentlyStaked as (numberOfAddressesCurrentlyStaked) + (1)
 * calls ERC20(Address 0xdE70AeD3d14d39b4955147EfcF272334bdB75AB5)'s at transferFrom function  with variable sender as (the address that called this function), variable recipient as (the address of this contract), variable amount as _stakeAmt
 * emits event Staked with inputs the address that called this function
*/
	function stake(uint256 _stakeAmt) public {
		require((_stakeAmt > uint256(0)), "Staked amount needs to be greater than 0");
		record memory thisRecord = informationAboutStakeScheme[msg.sender];
		require((_stakeAmt >= minStakeAmt), "Less than minimum stake amount");
		require(((_stakeAmt + thisRecord.stakeAmt) <= maxStakeAmt), "More than maximum stake amount");
		require((thisRecord.stakeAmt == uint256(0)), "Need to unstake before restaking");
		informationAboutStakeScheme[msg.sender]  = record (block.timestamp, _stakeAmt, block.timestamp, uint256(0), uint256(0));
		addressStore[numberOfAddressesCurrentlyStaked]  = msg.sender;
		numberOfAddressesCurrentlyStaked  = (numberOfAddressesCurrentlyStaked + uint256(1));
		ERC20(address(0xdE70AeD3d14d39b4955147EfcF272334bdB75AB5)).transferFrom(msg.sender, address(this), _stakeAmt);
		emit Staked(msg.sender);
	}

/**
 * Function unstake
 * The function takes in 1 variable, (zero or a positive integer) _unstakeAmt. It can be called by functions both inside and outside of this contract. It does the following :
 * creates an internal variable thisRecord with initial value informationAboutStakeScheme with element the address that called this function
 * checks that _unstakeAmt is less than or equals to (thisRecord with element stakeAmt)
 * checks that ((current time) - (minStakePeriod)) is greater than or equals to (thisRecord with element stakeTime)
 * creates an internal variable newAccum with initial value (thisRecord with element accumulatedInterestToUpdateTime) + (((thisRecord with element stakeAmt) * ((minimum of current time, 1701334850) - (thisRecord with element lastUpdateTime)) * (consolidatedInterestRate with variable _stakedAmt as (thisRecord with element stakeAmt)) * (1000000000000000000)) / (86400000000000000000000000000))
 * creates an internal variable interestToRemove with initial value ((newAccum) * (_unstakeAmt)) / (thisRecord with element stakeAmt)
 * if _unstakeAmt is equals to (thisRecord with element stakeAmt) then (repeat numberOfAddressesCurrentlyStaked times with loop variable i0 :  (if (addressStore with element Loop Variable i0) is equals to (the address that called this function) then (updates addressStore (Element Loop Variable i0) as addressStore with element (numberOfAddressesCurrentlyStaked) - (1); then updates numberOfAddressesCurrentlyStaked as (numberOfAddressesCurrentlyStaked) - (1); and then terminates the for-next loop)))
 * updates informationAboutStakeScheme (Element the address that called this function) as Struct comprising (thisRecord with element stakeTime), ((thisRecord with element stakeAmt) - (_unstakeAmt)), current time, ((newAccum) - (interestToRemove)), ((thisRecord with element amtWithdrawn) + (interestToRemove))
 * emits event Unstaked with inputs the address that called this function
 * checks that (ERC20(Address 0xdE70AeD3d14d39b4955147EfcF272334bdB75AB5)'s at balanceOf function  with variable recipient as (the address of this contract)) is greater than or equals to ((((_unstakeAmt) * ((1000000) - (principalWithdrawalTax))) / (1000000)) + (interestToRemove))
 * if ((((_unstakeAmt) * ((1000000) - (principalWithdrawalTax))) / (1000000)) + (interestToRemove)) is strictly greater than 0 then (calls ERC20(Address 0xdE70AeD3d14d39b4955147EfcF272334bdB75AB5)'s at transfer function  with variable recipient as (the address that called this function), variable amount as ((((_unstakeAmt) * ((1000000) - (principalWithdrawalTax))) / (1000000)) + (interestToRemove)))
 * updates totalWithdrawals as (totalWithdrawals) + (interestToRemove)
*/
	function unstake(uint256 _unstakeAmt) public {
		record memory thisRecord = informationAboutStakeScheme[msg.sender];
		require((_unstakeAmt <= thisRecord.stakeAmt), "Withdrawing more than staked amount");
		require(((block.timestamp - minStakePeriod) >= thisRecord.stakeTime), "Insufficient stake period");
		uint256 newAccum = (thisRecord.accumulatedInterestToUpdateTime + ((thisRecord.stakeAmt * (minUIntPair(block.timestamp, uint256(1701334850)) - thisRecord.lastUpdateTime) * consolidatedInterestRate(thisRecord.stakeAmt) * uint256(1000000000000000000)) / uint256(86400000000000000000000000000)));
		uint256 interestToRemove = ((newAccum * _unstakeAmt) / thisRecord.stakeAmt);
		if ((_unstakeAmt == thisRecord.stakeAmt)){
			for (uint i0 = 0; i0 < numberOfAddressesCurrentlyStaked; i0++){
				if ((addressStore[i0] == msg.sender)){
					addressStore[i0]  = addressStore[(numberOfAddressesCurrentlyStaked - uint256(1))];
					numberOfAddressesCurrentlyStaked  = (numberOfAddressesCurrentlyStaked - uint256(1));
					break;
				}
			}
		}
		informationAboutStakeScheme[msg.sender]  = record (thisRecord.stakeTime, (thisRecord.stakeAmt - _unstakeAmt), block.timestamp, (newAccum - interestToRemove), (thisRecord.amtWithdrawn + interestToRemove));
		emit Unstaked(msg.sender);
		require((ERC20(address(0xdE70AeD3d14d39b4955147EfcF272334bdB75AB5)).balanceOf(address(this)) >= (((_unstakeAmt * (uint256(1000000) - principalWithdrawalTax)) / uint256(1000000)) + interestToRemove)), "Insufficient amount of the token in this contract to transfer out. Please contact the contract owner to top up the token.");
		if (((((_unstakeAmt * (uint256(1000000) - principalWithdrawalTax)) / uint256(1000000)) + interestToRemove) > uint256(0))){
			ERC20(address(0xdE70AeD3d14d39b4955147EfcF272334bdB75AB5)).transfer(msg.sender, (((_unstakeAmt * (uint256(1000000) - principalWithdrawalTax)) / uint256(1000000)) + interestToRemove));
		}
		totalWithdrawals  = (totalWithdrawals + interestToRemove);
	}

/**
 * Function updateRecordsWithLatestInterestRates
 * The function takes in 0 variables. It can only be called by other functions in this contract. It does the following :
 * repeat numberOfAddressesCurrentlyStaked times with loop variable i0 :  (creates an internal variable thisRecord with initial value informationAboutStakeScheme with element addressStore with element Loop Variable i0; and then updates informationAboutStakeScheme (Element addressStore with element Loop Variable i0) as Struct comprising (thisRecord with element stakeTime), (thisRecord with element stakeAmt), (minimum of current time, 1701334850), ((thisRecord with element accumulatedInterestToUpdateTime) + (((thisRecord with element stakeAmt) * ((minimum of current time, 1701334850) - (thisRecord with element lastUpdateTime)) * (consolidatedInterestRate with variable _stakedAmt as (Loop Variable i0)) * (1000000000000000000)) / (86400000000000000000000000000))), (thisRecord with element amtWithdrawn))
*/
	function updateRecordsWithLatestInterestRates() internal {
		for (uint i0 = 0; i0 < numberOfAddressesCurrentlyStaked; i0++){
			record memory thisRecord = informationAboutStakeScheme[addressStore[i0]];
			informationAboutStakeScheme[addressStore[i0]]  = record (thisRecord.stakeTime, thisRecord.stakeAmt, minUIntPair(block.timestamp, uint256(1701334850)), (thisRecord.accumulatedInterestToUpdateTime + ((thisRecord.stakeAmt * (minUIntPair(block.timestamp, uint256(1701334850)) - thisRecord.lastUpdateTime) * consolidatedInterestRate(i0) * uint256(1000000000000000000)) / uint256(86400000000000000000000000000))), thisRecord.amtWithdrawn);
		}
	}

/**
 * Function interestEarnedUpToNowBeforeTaxesAndNotYetWithdrawn
 * The function takes in 1 variable, (an address) _address. It can be called by functions both inside and outside of this contract. It does the following :
 * creates an internal variable thisRecord with initial value informationAboutStakeScheme with element _address
 * returns (thisRecord with element accumulatedInterestToUpdateTime) + (((thisRecord with element stakeAmt) * ((minimum of current time, 1701334850) - (thisRecord with element lastUpdateTime)) * (consolidatedInterestRate with variable _stakedAmt as (thisRecord with element stakeAmt)) * (1000000000000000000)) / (86400000000000000000000000000)) as output
*/
	function interestEarnedUpToNowBeforeTaxesAndNotYetWithdrawn(address _address) public view returns (uint256) {
		record memory thisRecord = informationAboutStakeScheme[_address];
		return (thisRecord.accumulatedInterestToUpdateTime + ((thisRecord.stakeAmt * (minUIntPair(block.timestamp, uint256(1701334850)) - thisRecord.lastUpdateTime) * consolidatedInterestRate(thisRecord.stakeAmt) * uint256(1000000000000000000)) / uint256(86400000000000000000000000000)));
	}

/**
 * Function totalStakedAmount
 * The function takes in 0 variables. It can be called by functions both inside and outside of this contract. It does the following :
 * creates an internal variable total with initial value 0
 * repeat numberOfAddressesCurrentlyStaked times with loop variable i0 :  (creates an internal variable thisRecord with initial value informationAboutStakeScheme with element addressStore with element Loop Variable i0; and then updates total as (total) + (thisRecord with element stakeAmt))
 * returns total as output
*/
	function totalStakedAmount() public view returns (uint256) {
		uint256 total = uint256(0);
		for (uint i0 = 0; i0 < numberOfAddressesCurrentlyStaked; i0++){
			record memory thisRecord = informationAboutStakeScheme[addressStore[i0]];
			total  = (total + thisRecord.stakeAmt);
		}
		return total;
	}

/**
 * Function totalAccumulatedInterest
 * The function takes in 0 variables. It can be called by functions both inside and outside of this contract. It does the following :
 * creates an internal variable total with initial value 0
 * repeat numberOfAddressesCurrentlyStaked times with loop variable i0 :  (updates total as (total) + (interestEarnedUpToNowBeforeTaxesAndNotYetWithdrawn with variable _address as (addressStore with element Loop Variable i0)))
 * returns total as output
*/
	function totalAccumulatedInterest() public view returns (uint256) {
		uint256 total = uint256(0);
		for (uint i0 = 0; i0 < numberOfAddressesCurrentlyStaked; i0++){
			total  = (total + interestEarnedUpToNowBeforeTaxesAndNotYetWithdrawn(addressStore[i0]));
		}
		return total;
	}

/**
 * Function withdrawInterestWithoutUnstaking
 * The function takes in 1 variable, (zero or a positive integer) _withdrawalAmt. It can be called by functions both inside and outside of this contract. It does the following :
 * creates an internal variable totalInterestEarnedTillNow with initial value interestEarnedUpToNowBeforeTaxesAndNotYetWithdrawn with variable _address as (the address that called this function)
 * checks that _withdrawalAmt is less than or equals to totalInterestEarnedTillNow
 * creates an internal variable thisRecord with initial value informationAboutStakeScheme with element the address that called this function
 * updates informationAboutStakeScheme (Element the address that called this function) as Struct comprising (thisRecord with element stakeTime), (thisRecord with element stakeAmt), (minimum of current time, 1701334850), ((totalInterestEarnedTillNow) - (_withdrawalAmt)), ((thisRecord with element amtWithdrawn) + (_withdrawalAmt))
 * checks that (ERC20(Address 0xdE70AeD3d14d39b4955147EfcF272334bdB75AB5)'s at balanceOf function  with variable recipient as (the address of this contract)) is greater than or equals to _withdrawalAmt
 * if _withdrawalAmt is strictly greater than 0 then (calls ERC20(Address 0xdE70AeD3d14d39b4955147EfcF272334bdB75AB5)'s at transfer function  with variable recipient as (the address that called this function), variable amount as _withdrawalAmt)
 * updates totalWithdrawals as (totalWithdrawals) + (_withdrawalAmt)
*/
	function withdrawInterestWithoutUnstaking(uint256 _withdrawalAmt) public {
		uint256 totalInterestEarnedTillNow = interestEarnedUpToNowBeforeTaxesAndNotYetWithdrawn(msg.sender);
		require((_withdrawalAmt <= totalInterestEarnedTillNow), "Withdrawn amount must be less than withdrawable amount");
		record memory thisRecord = informationAboutStakeScheme[msg.sender];
		informationAboutStakeScheme[msg.sender]  = record (thisRecord.stakeTime, thisRecord.stakeAmt, minUIntPair(block.timestamp, uint256(1701334850)), (totalInterestEarnedTillNow - _withdrawalAmt), (thisRecord.amtWithdrawn + _withdrawalAmt));
		require((ERC20(address(0xdE70AeD3d14d39b4955147EfcF272334bdB75AB5)).balanceOf(address(this)) >= _withdrawalAmt), "Insufficient amount of the token in this contract to transfer out. Please contact the contract owner to top up the token.");
		if ((_withdrawalAmt > uint256(0))){
			ERC20(address(0xdE70AeD3d14d39b4955147EfcF272334bdB75AB5)).transfer(msg.sender, _withdrawalAmt);
		}
		totalWithdrawals  = (totalWithdrawals + _withdrawalAmt);
	}

/**
 * Function withdrawAllInterestWithoutUnstaking
 * The function takes in 0 variables. It can only be called by functions outside of this contract. It does the following :
 * calls withdrawInterestWithoutUnstaking with variable _withdrawalAmt as (interestEarnedUpToNowBeforeTaxesAndNotYetWithdrawn with variable _address as (the address that called this function))
*/
	function withdrawAllInterestWithoutUnstaking() external {
		withdrawInterestWithoutUnstaking(interestEarnedUpToNowBeforeTaxesAndNotYetWithdrawn(msg.sender));
	}

/**
 * Function consolidatedInterestRate
 * The function takes in 1 variable, (zero or a positive integer) _stakedAmt. It can be called by functions both inside and outside of this contract. It does the following :
 * if (5000000000000000000000 is less than or equals to _stakedAmt) and (_stakedAmt is less than or equals to 9999000000000000000000) then (returns dailyInterestRate_2 as output)
 * if _stakedAmt is greater than or equals to 10000000000000000000000 then (returns dailyInterestRate_1 as output)
 * returns dailyInterestRate as output
*/
	function consolidatedInterestRate(uint256 _stakedAmt) public view returns (uint256) {
		if (((uint256(5000000000000000000000) <= _stakedAmt) && (_stakedAmt <= uint256(9999000000000000000000)))){
			return dailyInterestRate_2;
		}
		if ((_stakedAmt >= uint256(10000000000000000000000))){
			return dailyInterestRate_1;
		}
		return dailyInterestRate;
	}

/**
 * Function modifyDailyInterestRate
 * Notes for _dailyInterestRate : 10000 is one percent
 * The function takes in 1 variable, (zero or a positive integer) _dailyInterestRate. It can be called by functions both inside and outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * checks that 0 is strictly less than _dailyInterestRate
 * calls updateRecordsWithLatestInterestRates
 * updates dailyInterestRate as _dailyInterestRate
*/
	function modifyDailyInterestRate(uint256 _dailyInterestRate) public onlyOwner {
		require((uint256(0) < _dailyInterestRate), "Interest rate needs to be larger than 0%");
		updateRecordsWithLatestInterestRates();
		dailyInterestRate  = _dailyInterestRate;
	}

/**
 * Function modifyDailyInterestRate_1
 * Notes for _dailyInterestRate : 10000 is one percent
 * The function takes in 1 variable, (zero or a positive integer) _dailyInterestRate. It can be called by functions both inside and outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * checks that 0 is strictly less than _dailyInterestRate
 * calls updateRecordsWithLatestInterestRates
 * updates dailyInterestRate_1 as _dailyInterestRate
*/
	function modifyDailyInterestRate_1(uint256 _dailyInterestRate) public onlyOwner {
		require((uint256(0) < _dailyInterestRate), "Interest rate needs to be larger than 0%");
		updateRecordsWithLatestInterestRates();
		dailyInterestRate_1  = _dailyInterestRate;
	}

/**
 * Function modifyDailyInterestRate_2
 * Notes for _dailyInterestRate : 10000 is one percent
 * The function takes in 1 variable, (zero or a positive integer) _dailyInterestRate. It can be called by functions both inside and outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * checks that 0 is strictly less than _dailyInterestRate
 * calls updateRecordsWithLatestInterestRates
 * updates dailyInterestRate_2 as _dailyInterestRate
*/
	function modifyDailyInterestRate_2(uint256 _dailyInterestRate) public onlyOwner {
		require((uint256(0) < _dailyInterestRate), "Interest rate needs to be larger than 0%");
		updateRecordsWithLatestInterestRates();
		dailyInterestRate_2  = _dailyInterestRate;
	}

/**
 * Function ownerWithdrawToken0
 * The function takes in 1 variable, (zero or a positive integer) _amt. It can be called by functions both inside and outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * checks that (ERC20(Address 0xdE70AeD3d14d39b4955147EfcF272334bdB75AB5)'s at balanceOf function  with variable recipient as (the address of this contract)) is greater than or equals to ((_amt) + (totalAccumulatedInterest) + (totalStakedAmount))
 * if _amt is strictly greater than 0 then (calls ERC20(Address 0xdE70AeD3d14d39b4955147EfcF272334bdB75AB5)'s at transfer function  with variable recipient as (the address that called this function), variable amount as _amt)
*/
	function ownerWithdrawToken0(uint256 _amt) public onlyOwner {
		require((ERC20(address(0xdE70AeD3d14d39b4955147EfcF272334bdB75AB5)).balanceOf(address(this)) >= (_amt + totalAccumulatedInterest() + totalStakedAmount())), "Insufficient amount of the token in this contract to transfer out. Please contact the contract owner to top up the token.");
		if ((_amt > uint256(0))){
			ERC20(address(0xdE70AeD3d14d39b4955147EfcF272334bdB75AB5)).transfer(msg.sender, _amt);
		}
	}
}
