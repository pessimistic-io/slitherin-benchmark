// SPDX-License-Identifier: Apache-2.0

// Generated by impl.ts. Will be overwritten.
// Filename: './BaseCedarERC721DropV6.sol'

pragma solidity ^0.8.4;

import "./ICedarERC721Drop.sol";

/// Inherit from this base to implement introspection
abstract contract BaseCedarERC721DropV6 is ICedarERC721DropV6 {
    function supportedFeatures() override public pure returns (string[] memory features) {
        features = new string[](13);
        features[0] = "ICedarFeatures.sol:ICedarFeaturesV0";
        features[1] = "ICedarVersioned.sol:ICedarVersionedV1";
        features[2] = "IMulticallable.sol:IMulticallableV0";
        features[3] = "agreement/ICedarAgreement.sol:ICedarAgreementV0";
        features[4] = "issuance/ICedarNFTIssuance.sol:ICedarNFTIssuanceV3";
        features[5] = "lazymint/ICedarLazyMint.sol:ICedarLazyMintV0";
        features[6] = "standard/IERC721.sol:IERC721V0";
        features[7] = "royalties/IRoyalty.sol:IRoyaltyV0";
        features[8] = "baseURI/ICedarUpdateBaseURI.sol:ICedarUpdateBaseURIV0";
        features[9] = "metadata/ICedarNFTMetadata.sol:ICedarNFTMetadataV1";
        features[10] = "metadata/IContractMetadata.sol:ICedarMetadataV1";
        features[11] = "primarysale/IPrimarySale.sol:IPrimarySaleV0";
        features[12] = "pausable/ICedarPausable.sol:ICedarPausableV0";
    }

    /// This needs to be public to be callable from initialize via delegatecall
    function minorVersion() virtual override public pure returns (uint256 minor, uint256 patch);

    function implementationVersion() override public pure returns (uint256 major, uint256 minor, uint256 patch) {
        (minor, patch) = minorVersion();
        major = 6;
    }

    function implementationInterfaceName() virtual override public pure returns (string memory interfaceName) {
        interfaceName = "ICedarERC721DropV6";
    }

    function supportsInterface(bytes4 interfaceID) virtual override public view returns (bool) {
        return (interfaceID == type(IERC165Upgradeable).interfaceId) || ((interfaceID == type(ICedarFeaturesV0).interfaceId) || ((interfaceID == type(ICedarVersionedV1).interfaceId) || ((interfaceID == type(IMulticallableV0).interfaceId) || ((interfaceID == type(ICedarAgreementV0).interfaceId) || ((interfaceID == type(ICedarNFTIssuanceV3).interfaceId) || ((interfaceID == type(ICedarLazyMintV0).interfaceId) || ((interfaceID == type(IERC721V0).interfaceId) || ((interfaceID == type(IRoyaltyV0).interfaceId) || ((interfaceID == type(ICedarUpdateBaseURIV0).interfaceId) || ((interfaceID == type(ICedarNFTMetadataV1).interfaceId) || ((interfaceID == type(ICedarMetadataV1).interfaceId) || ((interfaceID == type(IPrimarySaleV0).interfaceId) || (interfaceID == type(ICedarPausableV0).interfaceId)))))))))))));
    }

    function isICedarFeaturesV0() override public pure returns (bool) {
        return true;
    }
}

