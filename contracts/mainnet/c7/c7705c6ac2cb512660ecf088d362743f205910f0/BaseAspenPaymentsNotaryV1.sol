// SPDX-License-Identifier: Apache-2.0

// Generated by impl.ts. Will be overwritten.
// Filename: './BaseAspenPaymentsNotaryV1.sol'

pragma solidity ^0.8.4;

import "./IPaymentsNotary.sol";
import "./IAspenFeatures.sol";
import "./IAspenVersioned.sol";
import "./IPaymentNotary.sol";

/// Inherit from this base to implement introspection
abstract contract BaseAspenPaymentsNotaryV1 is IAspenFeaturesV0, IAspenVersionedV2, IPaymentNotaryV1 {
    function supportedFeatures() override public pure returns (string[] memory features) {
        features = new string[](3);
        features[0] = "IAspenFeatures.sol:IAspenFeaturesV0";
        features[1] = "IAspenVersioned.sol:IAspenVersionedV2";
        features[2] = "payments/IPaymentNotary.sol:IPaymentNotaryV1";
    }

    /// This needs to be public to be callable from initialize via delegatecall
    function minorVersion() virtual override public pure returns (uint256 minor, uint256 patch);

    function implementationVersion() override public pure returns (uint256 major, uint256 minor, uint256 patch) {
        (minor, patch) = minorVersion();
        major = 1;
    }

    function implementationInterfaceId() virtual override public pure returns (string memory interfaceId) {
        interfaceId = "impl/IPaymentsNotary.sol:IAspenPaymentsNotaryV1";
    }

    function supportsInterface(bytes4 interfaceID) virtual override public view returns (bool) {
        return (interfaceID == type(IERC165Upgradeable).interfaceId) || ((interfaceID == type(IAspenFeaturesV0).interfaceId) || ((interfaceID == type(IAspenVersionedV2).interfaceId) || ((interfaceID == type(IPaymentNotaryV1).interfaceId) || (interfaceID == type(IAspenPaymentsNotaryV1).interfaceId))));
    }

    function isIAspenFeaturesV0() override public pure returns (bool) {
        return true;
    }
}

