// SPDX-License-Identifier: MIT
/*                
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@......@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%&@@@....@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%%%%%%%%%#((%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%%%@@@@@@@((((((((((%@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@(  ((((((((((@@(%%%%%%%%@@           @@(((((((%%@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@     ((((((((((((((%%%%@.      @@@       @&(((((%%.@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@    ((((((((((((((%%@..    @&&&&&&@      @(((%%%..@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@    ((((((((((((((@...   @&**&&&%,@.     @((%%....&@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@ @*(((((((((((((@...     @@**   &@      @%%......,@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@   ((((((((((((@....      .@*  &&@     @&.........@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@     ((((((((((#@....    @ ,,,,,&@     @*.........#@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@      ((((((((((%@....    @@@@@       @*@..........@@@@@@@@@@@@@@@@
@@@@@@@@@@@@(     (((((((((((((@@..........@@@@@@%............,%%@@@@@@@@@@@@@@@
@@@@@@@@@@@@@((((((((((((((((((@@#(((((((&@@ /@@@............%%%%&@@@@@@@@@@@@@@
@@@@@@@@@@@@@((((((((((((((((((((((((((((@  ****@@..........%%%%%%@@@@@@@@@@@@@@
@@@@@@@@@@@@@@(((((((((((((((((((((((((((@&   ***@........%%%%%%%%@@@@@@@@@@@@@@
@@@@@@@@@@@@@@#(((((((((((((((((((((((((((@  ****@((/...%%%%%%%%%%@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@(((((((((((((#(((((((((((((@  ****@((((((((%%%%%%%%@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@((((((%%%......(((((((((((@   .**@(((((((((((((%%%@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@%%%%.............(((((((((@  ***@((((((((((((((((%@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@%%....%%............((((((((@@&(((((((((((((@@((((@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@%.....@@...............(((((((((((((((((((((@@((((@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@......@@...................(((((((((((((((((@(((((@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@%.....@@................         /((((((((((@((((@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@%%%#...@@...........                        @@((((@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@%%%%%%%@@...                                @((((@@@@@@@@@@@@@@@@                
*/

pragma solidity ^0.8.0;

import "./Ownable.sol";
import "./ERC20.sol";

contract Mooney is ERC20, Ownable {
	uint256 constant public MAX_SUPPLY = 100000000 * (10**18);
	
	mapping (address => bool) public approvedMinters;

	constructor() ERC20("Mooney", "MOONEY") { }

	// only approved minters
	function mint(address to, uint256 amount) external {
		require(approvedMinters[msg.sender], "not approved");
		require(totalSupply() + amount <= MAX_SUPPLY, "mint exceeds supply limit");

		_mint(to, amount);
	}
	
	function addApprovedMinter(address[] memory addresses) external onlyOwner {
		for (uint256 i; i < addresses.length; i++) {
			approvedMinters[addresses[i]] = true;
		}
	}

	function removeApprovedMinter(address[] memory addresses) external onlyOwner {
		for (uint256 i; i < addresses.length; i++) {
			approvedMinters[addresses[i]] = false;
		}
	}
}
