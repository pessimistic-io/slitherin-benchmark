// SPDX-License-Identifier: AGPL-3.0-or-later
pragma solidity >=0.7.6;

interface IUniswapFeeCollector {
    /**
     * @notice Emitted when fees are collected from the LP.
     * @param  tokenId Uniswap Non-Fungible Position Manager token ID representing LP position.
     * @param  amount0 Amount of tokens collected for first token in pool.
     * @param  amount1 Amount of tokens collected for second token in pool.
     */
    event CollectFees(uint256 tokenId, uint256 amount0, uint256 amount1);

    /**
     * @notice Emitted when liquidity is increased.
     * @param  tokenId          Uniswap Non-Fungible Position Manager token ID representing LP position.
     * @param  baseTokenBalance Balance of base token used for the liquidity increase.
     */
    event IncreaseLiquidity(uint256 tokenId, uint256 baseTokenBalance);

    /**
     * @notice Emitted when the owner of the contract is changed.
     * @param  previousOwner Previous owner the contract.
     * @param  newOwner      New owner of the contract.
     */
    event OwnershipTransferred(address previousOwner, address newOwner);

    /**
     * @notice Emitted when the ERC721 representing the position is withdrawn from the contract.
     * @param  tokenId Uniswap Non-Fungible Position Manager token ID representing LP position.
     */
    event PositionWithdrawn(uint256 tokenId);

    /**
     * @notice Emitted when rewardCollectionAddress is changed.
     * @param  rewardCollectionAddress New rewardCollectionAddress.
     */
    event RewardCollectionAddressChanged(address rewardCollectionAddress);

    /**
     * @notice Emitted when runner address is changed.
     * @param  runnerAddress New runnerAddress.
     */
    event RunnerAddressChanged(address runnerAddress);

    /**
     * @notice Emitted when rewards are sent to the rewardCollectionAddress.
     * @param  rewardCollectionAddress Address to which tokens have been sent.
     * @param  rewardTokenAmount       Amount of tokens sent to the collection address.
     */
    event SendRewards(address rewardCollectionAddress, uint256 rewardTokenAmount);

    /**
     * @notice Collects the fees associated with provided liquidity.
     * @dev    The contract must hold the ERC721 token before it can collect fees.
     * @param  tokenId_ Uniswap Non-Fungible Position Manager token ID representing LP position.
     */
    function collectFees(uint256 tokenId_) external returns (uint256 amount0_, uint256 amount1_);

    /**
     * @notice Collect the unclaimed fees in the position and increase liquidity of the position with the calldata received from the runner script.
     * @dev    The contract must hold the ERC721 token before it can increase liquidity
     * @param  tokenId_ Uniswap Non-Fungible Position Manager token ID representing LP position.
     * @param  data_    Calldata required to execute swap. Generated by Uniswap SDK.
     */
    function collectFeesAndIncreaseLiquidity(uint256 tokenId_, bytes calldata data_) external;

    /**
     * @notice Increase liquidity of the position with the calldata received from the runner script.
     * @dev    The contract must hold the erc721 token before it can increase liquidity
     * @param  tokenId_ Uniswap Non-Fungible Position Manager token ID representing LP position.
     * @param  data_    Calldata required to execute swap. Generated by Uniswap SDK.
     */
    function increaseLiquidity(uint256 tokenId_, bytes calldata data_) external;

    /**
     * @notice Activated when an ERC721 is received through safeTransferFrom.
     */
    function onERC721Received(address, address, uint256, bytes calldata) external returns (bytes4);

    /**
     * @notice Change the reward collection address that rewards are sent to. Owner protected.
     * @param  rewardCollectionAddress_ New rewardCollectionAddress.
     */
    function setRewardCollectionAddress(address rewardCollectionAddress_) external;

    /**
     * @notice Change the runner address that can collect fees and increase liquidity. Owner protected.
     * @param  runnerAddress_ New runnerAddress.
     */
    function setRunnerAddress(address runnerAddress_) external;

    /**
     * @notice Change the owner of the contract. Owner protected.
     * @param  owner_ New owner of the contract.
     */
    function transferOwnership(address owner_) external;

    /**
     * @notice Withdraw a Uniswap ERC721 LP position held by the contract to the owner address. Owner protected.
     * @param  tokenId_ Uniswap Non-Fungible Position Manager token ID representing LP position.
     */
    function withdrawPosition(uint256 tokenId_) external;
}

