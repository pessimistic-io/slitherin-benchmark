// SPDX-License-Identifier: Apache-2.0

// Generated by impl.ts. Will be overwritten.
// Filename: './BaseAspenERC721DropV1.sol'

pragma solidity ^0.8.4;

import "./IAspenERC721Drop.sol";
import "./IAspenFeatures.sol";
import "./IAspenVersioned.sol";
import "./IMulticallable.sol";
import "./ICedarNFTIssuance.sol";
import "./INFTSupply.sol";
import "./IERC721.sol";
import "./IERC2981.sol";
import "./IERC4906.sol";
import "./IRoyalty.sol";
import "./IUpdateBaseURI.sol";
import "./IContractMetadata.sol";
import "./IOwnable.sol";
import "./INFTMetadata.sol";
import "./IAgreement.sol";
import "./IPrimarySale.sol";
import "./IPlatformFee.sol";
import "./IAgreement.sol";
import "./IAgreement.sol";
import "./ICedarNFTIssuance.sol";
import "./ILazyMint.sol";
import "./IPausable.sol";
import "./IContractMetadata.sol";
import "./IUpdateBaseURI.sol";
import "./IRoyalty.sol";
import "./IPrimarySale.sol";
import "./INFTLimitSupply.sol";
import "./IOwnable.sol";
import "./IPlatformFee.sol";

/// Delegate features
interface IDelegateBaseAspenERC721DropV1 is IRestrictedERC4906V0, IRestrictedAgreementV1, IDelegatedAgreementV0, IRestrictedNFTIssuanceV3, IRestrictedLazyMintV1, IRestrictedPausableV1, IRestrictedMetadataV2, IRestrictedUpdateBaseURIV1, IRestrictedRoyaltyV2, IRestrictedPrimarySaleV2, IRestrictedNFTLimitSupplyV1, IRestrictedOwnableV0, IRestrictedPlatformFeeV0 {}

/// Inherit from this base to implement introspection
abstract contract BaseAspenERC721DropV1 is IAspenFeaturesV0, IAspenVersionedV2, IMulticallableV0, IPublicNFTIssuanceV2, INFTSupplyV1, IERC721V2, IERC2981V0, IPublicRoyaltyV0, IPublicUpdateBaseURIV0, IPublicMetadataV0, IPublicOwnableV0, IAspenNFTMetadataV1, IPublicAgreementV1, IPublicPrimarySaleV1, IPublicPlatformFeeV0 {
    function supportedFeatures() override public pure returns (string[] memory features) {
        features = new string[](25);
        features[0] = "IAspenFeatures.sol:IAspenFeaturesV0";
        features[1] = "IAspenVersioned.sol:IAspenVersionedV2";
        features[2] = "IMulticallable.sol:IMulticallableV0";
        features[3] = "issuance/ICedarNFTIssuance.sol:IPublicNFTIssuanceV2";
        features[4] = "issuance/INFTSupply.sol:INFTSupplyV1";
        features[5] = "royalties/IRoyalty.sol:IPublicRoyaltyV0";
        features[6] = "baseURI/IUpdateBaseURI.sol:IPublicUpdateBaseURIV0";
        features[7] = "metadata/IContractMetadata.sol:IPublicMetadataV0";
        features[8] = "ownable/IOwnable.sol:IPublicOwnableV0";
        features[9] = "metadata/INFTMetadata.sol:IAspenNFTMetadataV1";
        features[10] = "agreement/IAgreement.sol:IPublicAgreementV1";
        features[11] = "primarysale/IPrimarySale.sol:IPublicPrimarySaleV1";
        features[12] = "royalties/IPlatformFee.sol:IPublicPlatformFeeV0";
        features[13] = "agreement/IAgreement.sol:IRestrictedAgreementV1";
        features[14] = "agreement/IAgreement.sol:IDelegatedAgreementV0";
        features[15] = "issuance/ICedarNFTIssuance.sol:IRestrictedNFTIssuanceV3";
        features[16] = "lazymint/ILazyMint.sol:IRestrictedLazyMintV1";
        features[17] = "pausable/IPausable.sol:IRestrictedPausableV1";
        features[18] = "metadata/IContractMetadata.sol:IRestrictedMetadataV2";
        features[19] = "baseURI/IUpdateBaseURI.sol:IRestrictedUpdateBaseURIV1";
        features[20] = "royalties/IRoyalty.sol:IRestrictedRoyaltyV2";
        features[21] = "primarysale/IPrimarySale.sol:IRestrictedPrimarySaleV2";
        features[22] = "issuance/INFTLimitSupply.sol:IRestrictedNFTLimitSupplyV1";
        features[23] = "ownable/IOwnable.sol:IRestrictedOwnableV0";
        features[24] = "royalties/IPlatformFee.sol:IRestrictedPlatformFeeV0";
    }

    /// This needs to be public to be callable from initialize via delegatecall
    function minorVersion() virtual override public pure returns (uint256 minor, uint256 patch);

    function implementationVersion() override public pure returns (uint256 major, uint256 minor, uint256 patch) {
        (minor, patch) = minorVersion();
        major = 1;
    }

    function implementationInterfaceId() virtual override public pure returns (string memory interfaceId) {
        interfaceId = "impl/IAspenERC721Drop.sol:IAspenERC721DropV1";
    }

    function supportsInterface(bytes4 interfaceID) virtual override public view returns (bool) {
        return (interfaceID == type(IERC165Upgradeable).interfaceId) || ((interfaceID == type(IAspenFeaturesV0).interfaceId) || ((interfaceID == type(IAspenVersionedV2).interfaceId) || ((interfaceID == type(IMulticallableV0).interfaceId) || ((interfaceID == type(IPublicNFTIssuanceV2).interfaceId) || ((interfaceID == type(INFTSupplyV1).interfaceId) || ((interfaceID == type(IERC721V2).interfaceId) || ((interfaceID == type(IERC2981V0).interfaceId) || ((interfaceID == type(IRestrictedERC4906V0).interfaceId) || ((interfaceID == type(IPublicRoyaltyV0).interfaceId) || ((interfaceID == type(IPublicUpdateBaseURIV0).interfaceId) || ((interfaceID == type(IPublicMetadataV0).interfaceId) || ((interfaceID == type(IPublicOwnableV0).interfaceId) || ((interfaceID == type(IAspenNFTMetadataV1).interfaceId) || ((interfaceID == type(IPublicAgreementV1).interfaceId) || ((interfaceID == type(IPublicPrimarySaleV1).interfaceId) || ((interfaceID == type(IPublicPlatformFeeV0).interfaceId) || ((interfaceID == type(IRestrictedAgreementV1).interfaceId) || ((interfaceID == type(IDelegatedAgreementV0).interfaceId) || ((interfaceID == type(IRestrictedNFTIssuanceV3).interfaceId) || ((interfaceID == type(IRestrictedLazyMintV1).interfaceId) || ((interfaceID == type(IRestrictedPausableV1).interfaceId) || ((interfaceID == type(IRestrictedMetadataV2).interfaceId) || ((interfaceID == type(IRestrictedUpdateBaseURIV1).interfaceId) || ((interfaceID == type(IRestrictedRoyaltyV2).interfaceId) || ((interfaceID == type(IRestrictedPrimarySaleV2).interfaceId) || ((interfaceID == type(IRestrictedNFTLimitSupplyV1).interfaceId) || ((interfaceID == type(IRestrictedOwnableV0).interfaceId) || ((interfaceID == type(IRestrictedPlatformFeeV0).interfaceId) || (interfaceID == type(IAspenERC721DropV1).interfaceId)))))))))))))))))))))))))))));
    }

    function isIAspenFeaturesV0() override public pure returns (bool) {
        return true;
    }
}

