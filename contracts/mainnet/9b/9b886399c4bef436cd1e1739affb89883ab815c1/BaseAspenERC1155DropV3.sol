// SPDX-License-Identifier: Apache-2.0

// Generated by impl.ts. Will be overwritten.
// Filename: './BaseAspenERC1155DropV3.sol'

pragma solidity ^0.8.4;

import "./IAspenERC1155Drop.sol";
import "./IAspenFeatures.sol";
import "./IAspenVersioned.sol";
import "./IMulticallable.sol";
import "./IERC1155.sol";
import "./IERC2981.sol";
import "./IERC4906.sol";
import "./ISFTSupply.sol";
import "./ISFTLimitSupply.sol";
import "./ICedarSFTIssuance.sol";
import "./ICedarSFTIssuance.sol";
import "./ICedarSFTIssuance.sol";
import "./IRoyalty.sol";
import "./IRoyalty.sol";
import "./IUpdateBaseURI.sol";
import "./IUpdateBaseURI.sol";
import "./IContractMetadata.sol";
import "./IContractMetadata.sol";
import "./ISFTMetadata.sol";
import "./IOwnable.sol";
import "./IPausable.sol";
import "./IPausable.sol";
import "./IAgreement.sol";
import "./IAgreement.sol";
import "./IAgreement.sol";
import "./IPrimarySale.sol";
import "./IPrimarySale.sol";
import "./IPrimarySale.sol";
import "./IRoyalty.sol";
import "./IRoyalty.sol";
import "./IRoyalty.sol";
import "./IPlatformFee.sol";
import "./ILazyMint.sol";
import "./ISFTClaimCount.sol";

/// Delegate features
interface IDelegateBaseAspenERC1155DropV3 is IDelegatedSFTSupplyV2, IDelegatedSFTIssuanceV1, IDelegatedRoyaltyV1, IDelegatedUpdateBaseURIV1, IDelegatedMetadataV0, IDelegatedPausableV0, IDelegatedAgreementV1, IDelegatedPrimarySaleV0, IDelegatedPlatformFeeV0 {}

/// Restricted features
interface IRestrictedBaseAspenERC1155DropV3 is IRestrictedERC4906V0, IRestrictedSFTLimitSupplyV1, IRestrictedSFTIssuanceV5, IRestrictedRoyaltyV1, IRestrictedUpdateBaseURIV1, IRestrictedMetadataV2, IRestrictedPausableV1, IRestrictedAgreementV3, IRestrictedPrimarySaleV2, IRestrictedSFTPrimarySaleV0, IRestrictedOperatorFiltererV0, IRestrictedOperatorFilterToggleV0, IRestrictedLazyMintV1, IRestrictedSFTClaimCountV0 {}

/// Inherit from this base to implement introspection
abstract contract BaseAspenERC1155DropV3 is IAspenFeaturesV1, IAspenVersionedV2, IMulticallableV0, IERC1155V4, IERC2981V0, IPublicSFTIssuanceV5, IAspenSFTMetadataV1, IPublicOwnableV1, IPublicAgreementV2, IPublicOperatorFilterToggleV1 {
    function supportedFeatureCodes() override public pure returns (uint256[] memory features) {
        features = new uint256[](33);
        /// IAspenFeatures.sol:IAspenFeaturesV1
        features[0] = 0x6efbb19b;
        /// IAspenVersioned.sol:IAspenVersionedV2
        features[1] = 0xe4144b09;
        /// IMulticallable.sol:IMulticallableV0
        features[2] = 0xad792170;
        /// standard/IERC1155.sol:IERC1155V4
        features[3] = 0xb3a61f0c;
        /// standard/IERC2981.sol:IERC2981V0
        features[4] = 0x4313e0e3;
        /// standard/IERC4906.sol:IRestrictedERC4906V0
        features[5] = 0xd8519fe1;
        /// issuance/ISFTSupply.sol:IDelegatedSFTSupplyV2
        features[6] = 0xd8a717a5;
        /// issuance/ISFTLimitSupply.sol:IRestrictedSFTLimitSupplyV1
        features[7] = 0x4671a6e2;
        /// issuance/ICedarSFTIssuance.sol:IPublicSFTIssuanceV5
        features[8] = 0xbe97b5f9;
        /// issuance/ICedarSFTIssuance.sol:IDelegatedSFTIssuanceV1
        features[9] = 0xb6cf25d6;
        /// issuance/ICedarSFTIssuance.sol:IRestrictedSFTIssuanceV5
        features[10] = 0x4d83ba4b;
        /// royalties/IRoyalty.sol:IDelegatedRoyaltyV1
        features[11] = 0x3da80d9a;
        /// royalties/IRoyalty.sol:IRestrictedRoyaltyV1
        features[12] = 0x29e81c60;
        /// baseURI/IUpdateBaseURI.sol:IDelegatedUpdateBaseURIV1
        features[13] = 0xed70707;
        /// baseURI/IUpdateBaseURI.sol:IRestrictedUpdateBaseURIV1
        features[14] = 0xe7f77644;
        /// metadata/IContractMetadata.sol:IDelegatedMetadataV0
        features[15] = 0xc5ef2830;
        /// metadata/IContractMetadata.sol:IRestrictedMetadataV2
        features[16] = 0x7c749d62;
        /// metadata/ISFTMetadata.sol:IAspenSFTMetadataV1
        features[17] = 0x86b13fc8;
        /// ownable/IOwnable.sol:IPublicOwnableV1
        features[18] = 0x48fcaf28;
        /// pausable/IPausable.sol:IDelegatedPausableV0
        features[19] = 0x8b81344f;
        /// pausable/IPausable.sol:IRestrictedPausableV1
        features[20] = 0x9a19ec63;
        /// agreement/IAgreement.sol:IPublicAgreementV2
        features[21] = 0x6051f2a9;
        /// agreement/IAgreement.sol:IDelegatedAgreementV1
        features[22] = 0x3ae96461;
        /// agreement/IAgreement.sol:IRestrictedAgreementV3
        features[23] = 0x2f96dff3;
        /// primarysale/IPrimarySale.sol:IDelegatedPrimarySaleV0
        features[24] = 0xd6e1bfe9;
        /// primarysale/IPrimarySale.sol:IRestrictedPrimarySaleV2
        features[25] = 0x63ff2dbf;
        /// primarysale/IPrimarySale.sol:IRestrictedSFTPrimarySaleV0
        features[26] = 0x47c483fb;
        /// royalties/IRoyalty.sol:IRestrictedOperatorFiltererV0
        features[27] = 0x8622d2ee;
        /// royalties/IRoyalty.sol:IPublicOperatorFilterToggleV1
        features[28] = 0x90fc4399;
        /// royalties/IRoyalty.sol:IRestrictedOperatorFilterToggleV0
        features[29] = 0x22a8937c;
        /// royalties/IPlatformFee.sol:IDelegatedPlatformFeeV0
        features[30] = 0x6195f7de;
        /// lazymint/ILazyMint.sol:IRestrictedLazyMintV1
        features[31] = 0x7f0a633a;
        /// issuance/ISFTClaimCount.sol:IRestrictedSFTClaimCountV0
        features[32] = 0xd603d728;
    }

    /// This needs to be public to be callable from initialize via delegatecall
    function minorVersion() virtual override public pure returns (uint256 minor, uint256 patch);

    function implementationVersion() override public pure returns (uint256 major, uint256 minor, uint256 patch) {
        (minor, patch) = minorVersion();
        major = 3;
    }

    function implementationInterfaceId() virtual override public pure returns (string memory interfaceId) {
        interfaceId = "impl/IAspenERC1155Drop.sol:IAspenERC1155DropV3";
    }

    function supportsInterface(bytes4 interfaceID) virtual override public view returns (bool) {
        return (interfaceID != 0x0) && ((interfaceID != 0xffffffff) && ((interfaceID == 0x01ffc9a7) || ((interfaceID == type(IAspenFeaturesV1).interfaceId) || ((interfaceID == type(IAspenVersionedV2).interfaceId) || ((interfaceID == type(IMulticallableV0).interfaceId) || ((interfaceID == type(IERC1155V4).interfaceId) || ((interfaceID == type(IERC2981V0).interfaceId) || ((interfaceID == type(IRestrictedERC4906V0).interfaceId) || ((interfaceID == type(IDelegatedSFTSupplyV2).interfaceId) || ((interfaceID == type(IRestrictedSFTLimitSupplyV1).interfaceId) || ((interfaceID == type(IPublicSFTIssuanceV5).interfaceId) || ((interfaceID == type(IDelegatedSFTIssuanceV1).interfaceId) || ((interfaceID == type(IRestrictedSFTIssuanceV5).interfaceId) || ((interfaceID == type(IDelegatedRoyaltyV1).interfaceId) || ((interfaceID == type(IRestrictedRoyaltyV1).interfaceId) || ((interfaceID == type(IDelegatedUpdateBaseURIV1).interfaceId) || ((interfaceID == type(IRestrictedUpdateBaseURIV1).interfaceId) || ((interfaceID == type(IDelegatedMetadataV0).interfaceId) || ((interfaceID == type(IRestrictedMetadataV2).interfaceId) || ((interfaceID == type(IAspenSFTMetadataV1).interfaceId) || ((interfaceID == type(IPublicOwnableV1).interfaceId) || ((interfaceID == type(IDelegatedPausableV0).interfaceId) || ((interfaceID == type(IRestrictedPausableV1).interfaceId) || ((interfaceID == type(IPublicAgreementV2).interfaceId) || ((interfaceID == type(IDelegatedAgreementV1).interfaceId) || ((interfaceID == type(IRestrictedAgreementV3).interfaceId) || ((interfaceID == type(IDelegatedPrimarySaleV0).interfaceId) || ((interfaceID == type(IRestrictedPrimarySaleV2).interfaceId) || ((interfaceID == type(IRestrictedSFTPrimarySaleV0).interfaceId) || ((interfaceID == type(IRestrictedOperatorFiltererV0).interfaceId) || ((interfaceID == type(IPublicOperatorFilterToggleV1).interfaceId) || ((interfaceID == type(IRestrictedOperatorFilterToggleV0).interfaceId) || ((interfaceID == type(IDelegatedPlatformFeeV0).interfaceId) || ((interfaceID == type(IRestrictedLazyMintV1).interfaceId) || ((interfaceID == type(IRestrictedSFTClaimCountV0).interfaceId) || (interfaceID == type(IAspenERC1155DropV3).interfaceId))))))))))))))))))))))))))))))))))));
    }

    function isIAspenFeaturesV1() override public pure returns (bool) {
        return true;
    }
}

