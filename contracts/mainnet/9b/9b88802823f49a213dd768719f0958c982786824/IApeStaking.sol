// SPDX-License-Identifier: UNLICENSED
// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.6.6. SEE SOURCE BELOW. !!
pragma solidity ^0.8.4;

import "./IApeCoinStaking.sol";

interface IApeStaking {
    struct StakingInfo {
        address nftAsset;
        uint256 cashAmount;
        uint256 borrowAmount;
    }

    struct DepositInfo {
        uint256[] mainTokenIds;
        uint256[] bakcTokenIds;
    }

    event ClaimPairNft(
        address userAddr,
        address nftAsset,
        uint256 mainTokenId,
        uint256 bakcTokenId,
        uint256 rewardAmount
    );
    event ClaimSingleNft(
        address userAddr,
        address nftAsset,
        uint256 nftId,
        uint256 rewardAmount
    );
    event DepositNftToStake(
        address userAddr,
        address nftAsset,
        uint256[] nftIds,
        uint256 iTokenAmount,
        uint256 ptokenAmount
    );
    event Initialized(uint8 version);
    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );
    event StakePairNft(
        address userAddr,
        address nftAsset,
        uint256 mainTokenId,
        uint256 bakcTokenId,
        uint256 amount
    );
    event StakeSingleNft(
        address userAddr,
        address nftAsset,
        uint256 nftId,
        uint256 amount
    );
    event UnstakePairNft(
        address userAddr,
        address nftAsset,
        uint256 mainTokenId,
        uint256 bakcTokenId,
        uint256 amount,
        uint256 rewardAmount
    );
    event UnstakeSingleNft(
        address userAddr,
        address nftAsset,
        uint256 nftId,
        uint256 amount,
        uint256 rewardAmount
    );
    event WithdrawNftFromStake(
        address userAddr,
        address nftAsset,
        uint256 nftId,
        uint256 iTokenAmount,
        uint256 ptokenAmount
    );

    enum RewardAction { 
        CLAIM, 
        WITHDRAW,
        REDEEM,
        RESTAKE,
        STOPSTAKE,
        ONWITHDRAW,
        ONREDEEM
    }

    function apeCoin() external view returns (address);

    function apeCoinStaking() external view returns (address);

    function apePool() external view returns (address);

    function bakcAddr() external view returns (address);

    function baycAddr() external view returns (address);

    function borrowApeAndStake(
        StakingInfo memory stakingInfo,
        IApeCoinStaking.SingleNft[] memory _nfts,
        IApeCoinStaking.PairNftDepositWithAmount[] memory _nftPairs
    ) external;

    function claimAndRestake(
        address userAddr,
        uint256[] memory baycNfts,
        uint256[] memory maycNfts,
        IApeCoinStaking.PairNft[] memory baycPairNfts,
        IApeCoinStaking.PairNft[] memory maycPairNfts
    ) external;

    function claimApeCoin(address nftAsset, uint256[] memory _nfts) external;

    function claimBAKC(
        address nftAsset,
        IApeCoinStaking.PairNft[] memory _nftPairs
    ) external;

    function depositAndBorrowApeAndStake(
        DepositInfo memory depositInfo,
        StakingInfo memory stakingInfo,
        IApeCoinStaking.SingleNft[] memory _nfts,
        IApeCoinStaking.PairNftDepositWithAmount[] memory _nftPairs
    ) external;

    function feeTo() external view returns (address);

    function getPTokenStaking(address nftAsset)
        external
        view
        returns (address ptokenStaking);

    function getRewardRatePerBlock(uint256 poolId, uint256 addAmount)
        external
        view
        returns (uint256);

    function getStakeNftIds(address nftAsset)
        external
        view
        returns (uint256[] memory nftIds);

    function getUserHealth(address userAddr)
        external
        returns (uint256 totalIncome, uint256 totalPay);

    function getUserInfo(address userAddr, address nftAsset)
        external
        returns (
            uint256 collectRate,
            uint256 iTokenAmount,
            uint256 pTokenAmount,
            uint256 interestReward,
            uint256[] memory stakeNftIds,
            uint256[] memory depositNftIds
        );

    function initialize(
        address apeCoinStaking_,
        address apePool_,
        address nftGateway_,
        address pTokenFactory_,
        address pawnToken_,
        address feeTo_,
        ApeStakingStorage.StakingConfiguration memory stakingConfiguration_
    ) external;

    function maycAddr() external view returns (address);

    function nftGateway() external view returns (address);

    function onERC721Received(
        address,
        address,
        uint256,
        bytes memory
    ) external returns (bytes4);

    function onStopStake(
        address caller,
        address nftAsset,
        uint256[] memory nftIds,
        RewardAction actionType
    ) external;

    function owner() external view returns (address);

    function pawnToken() external view returns (address);

    function pbakcAddr() external view returns (address);

    function pbaycAddr() external view returns (address);

    function pmaycAddr() external view returns (address);

    function renounceOwnership() external;

    function setCollectRate(uint256 newCollectRate) external;

    function setFeeTo(address newFeeTo) external;

    function setStakingConfiguration(
        ApeStakingStorage.StakingConfiguration memory newStakingConfiguration
    ) external;

    function stakingConfiguration()
        external
        view
        returns (
            uint256 addMinStakingRate,
            uint256 restakeMinTotalAmount,
            uint256 restakeMinOneAmount,
            uint256 liquidateRate,
            uint256 borrowSafeRate,
            uint256 liquidatePawnAmount,
            uint256 feeRate
        );

    function transferOwnership(address newOwner) external;

    function unstakeAndRepay(
        address userAddr,
        address[] memory nftAssets,
        uint256[] memory nftIds
    ) external;

    function withdraw(
        uint256[] memory _baycTokenIds,
        uint256[] memory _maycTokenIds,
        uint256[] memory _bakcTokenIds
    ) external;

    function withdrawApeCoin(
        address nftAsset,
        IApeCoinStaking.SingleNft[] memory _nfts
    ) external;

    function withdrawBAKC(
        address nftAsset,
        IApeCoinStaking.PairNftWithdrawWithAmount[] memory _nftPairs
    ) external;
}

interface ApeStakingStorage {
    struct StakingConfiguration {
        uint256 addMinStakingRate;
        uint256 restakeMinTotalAmount;
        uint256 restakeMinOneAmount;
        uint256 liquidateRate;
        uint256 borrowSafeRate;
        uint256 liquidatePawnAmount;
        uint256 feeRate;
    }
}
